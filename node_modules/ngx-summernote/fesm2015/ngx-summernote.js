import { __awaiter } from 'tslib';
import { HttpClient } from '@angular/common/http';
import { EventEmitter, Directive, forwardRef, ElementRef, NgZone, Input, Output, Renderer2, NgModule } from '@angular/core';
import { NG_VALUE_ACCESSOR } from '@angular/forms';
import { combineLatest } from 'rxjs';
import { map } from 'rxjs/operators';

/**
 * @fileoverview added by tsickle
 * Generated from: lib/code-block.button.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/** @type {?} */
const codeBlockButtonStyle = `font-family: Menlo, Monaco, Consolas, 'Courier New', monospace;
font-size: 12px;
padding: 14px 12px;
margin-bottom: 12px;
line-height: 1.42857;
word-break: break-all;
overflow-wrap: break-word;
background-color: rgb(250, 251, 253);
border: 1px solid rgb(234, 236, 240);
border-radius: 4px; color: #60a0b0;
white-space: pre-wrap;`;
/** @type {?} */
const codeBlockButton = (/**
 * @param {?} context
 * @return {?}
 */
function (context) {
    /** @type {?} */
    const ui = $.summernote.ui;
    // create button
    /** @type {?} */
    const button = ui.button({
        contents: '<i class="note-icon-frame" style="margin-right: 4px"></i> Code block',
        tooltip: 'Add code block',
        container: '.note-editor',
        className: 'note-btn',
        click: (/**
         * @return {?}
         */
        function () {
            /** @type {?} */
            let selectedText = null;
            // The below code will copy the selected block and add it into our code block
            if (window.getSelection) {
                selectedText = window
                    .getSelection()
                    .toString()
                    .replace(/^\s+|\s+$/g, '');
            }
            /** @type {?} */
            const codeText = selectedText ? selectedText : `Place your code here.`;
            /** @type {?} */
            const codeBlock = `<pre class="code-block" style="${codeBlockButtonStyle}">${codeText}</pre>`;
            context.invoke('editor.pasteHTML', codeBlock);
        })
    });
    return button.render(); // return button as jquery object
});

/**
 * @fileoverview added by tsickle
 * Generated from: lib/ngx-summernote.directive.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class NgxSummernoteDirective {
    /**
     * @param {?} el
     * @param {?} zone
     * @param {?} http
     */
    constructor(el, zone, http) {
        this.el = el;
        this.zone = zone;
        this.http = http;
        // summernoteModel directive as output: update model if editor contentChanged
        this.summernoteModelChange = new EventEmitter();
        this.imageUpload = new EventEmitter();
        this.mediaDelete = new EventEmitter();
        // // summernoteInit directive as output: send manual editor initialization
        // @Output() summernoteInit: EventEmitter<Object> = new EventEmitter<Object>();
        this.blur = new EventEmitter();
        this._options = {};
        this.SPECIAL_TAGS = ['img', 'button', 'input', 'a'];
        this.INNER_HTML_ATTR = 'innerHTML';
        this._oldModel = null;
        // Begin ControlValueAccesor methods.
        this.onChange = (/**
         * @param {?} _
         * @return {?}
         */
        (_) => { });
        this.onTouched = (/**
         * @return {?}
         */
        () => { });
        /** @type {?} */
        const element = el.nativeElement;
        // check if the element is a special tag
        if (this.SPECIAL_TAGS.indexOf(element.tagName.toLowerCase()) !== -1) {
            this._hasSpecialTag = true;
        }
        // jquery wrap and store element
        // this._$element = <any>$(element);
        this.zone = zone;
    }
    /**
     * @param {?} options
     * @return {?}
     */
    set ngxSummernote(options) {
        if (options) {
            if (!options.buttons) {
                options.buttons = {};
            }
            options.callbacks = Object.assign({}, options.callbacks, { onImageUpload: (/**
                 * @param {?} files
                 * @return {?}
                 */
                files => this.uploadImage(files)), onMediaDelete: (/**
                 * @param {?} files
                 * @return {?}
                 */
                files => this.mediaDelete.emit({ url: $(files[0]).attr('src') })) });
            // add custom buttons
            options.buttons.codeBlock = codeBlockButton;
            Object.assign(this._options, options);
        }
    }
    // summernoteModel directive as input: store initial editor content
    /**
     * @param {?} content
     * @return {?}
     */
    set summernoteModel(content) {
        this.updateEditor(content);
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        this.createEditor();
    }
    /**
     * @param {?} changes
     * @return {?}
     */
    ngOnChanges(changes) {
        if (this._editorInitialized && changes) {
            if (changes.ngxSummernoteDisabled &&
                !changes.ngxSummernoteDisabled.firstChange &&
                changes.ngxSummernoteDisabled.currentValue !==
                    changes.ngxSummernoteDisabled.previousValue) {
                if (changes.ngxSummernoteDisabled.currentValue) {
                    this._$element.summernote('disable');
                }
                else {
                    this._$element.summernote('enable');
                }
            }
        }
    }
    /**
     * @return {?}
     */
    ngOnDestroy() {
        this.destroyEditor();
        if (this.uploadSub) {
            this.uploadSub.unsubscribe();
        }
    }
    // Form model content changed.
    /**
     * @param {?} content
     * @return {?}
     */
    writeValue(content) {
        this.updateEditor(content);
    }
    /**
     * @param {?} fn
     * @return {?}
     */
    registerOnChange(fn) {
        this.onChange = fn;
    }
    /**
     * @param {?} fn
     * @return {?}
     */
    registerOnTouched(fn) {
        this.onTouched = fn;
    }
    // Update editor with model contents.
    /**
     * @private
     * @param {?} content
     * @return {?}
     */
    updateEditor(content) {
        if (JSON.stringify(this._oldModel) === JSON.stringify(content)) {
            return;
        }
        this._oldModel = content;
        // this._$element.html(content);
        if (this._editorInitialized) {
            this._$element.summernote('code', content);
        }
        else {
            this._$element.html(content);
        }
    }
    // update model if editor contentChanged
    /**
     * @private
     * @param {?=} content
     * @return {?}
     */
    updateModel(content) {
        // console.log('update model', content)
        this.zone.run((/**
         * @return {?}
         */
        () => {
            /** @type {?} */
            let modelContent = null;
            if (this._hasSpecialTag) {
                /** @type {?} */
                const attributeNodes = this._$element[0].attributes;
                /** @type {?} */
                const attrs = {};
                for (let i = 0; i < attributeNodes.length; i++) {
                    /** @type {?} */
                    const attrName = attributeNodes[i].name;
                    if (this._options.angularIgnoreAttrs &&
                        this._options.angularIgnoreAttrs.indexOf(attrName) !== -1) {
                        continue;
                    }
                    attrs[attrName] = attributeNodes[i].value;
                }
                if (this._$element[0].innerHTML) {
                    attrs[this.INNER_HTML_ATTR] = this._$element[0].innerHTML;
                }
                modelContent = attrs;
            }
            else {
                /** @type {?} */
                const returnedHtml = content || '';
                if (typeof returnedHtml === 'string') {
                    modelContent = returnedHtml;
                }
            }
            if (this._oldModel !== modelContent) {
                this._oldModel = modelContent;
                // Update summernoteModel
                this.summernoteModelChange.emit(modelContent);
                // Update form model.
                this.onChange(content);
            }
        }));
    }
    /**
     * @private
     * @return {?}
     */
    initListeners() {
        /** @type {?} */
        const self = this;
        if (!this._$element) {
            return;
        }
        this._$element.on('summernote.init', (/**
         * @return {?}
         */
        function () {
            setTimeout((/**
             * @return {?}
             */
            function () {
                self.updateModel();
            }), 0);
        }));
        this._$element.on('summernote.change', (/**
         * @param {?} event
         * @param {?} contents
         * @param {?} $editable
         * @return {?}
         */
        function (event, contents, $editable) {
            setTimeout((/**
             * @return {?}
             */
            function () {
                self.updateModel(contents);
            }), 0);
        }));
        this._$element.on('summernote.blur', (/**
         * @return {?}
         */
        function () {
            setTimeout((/**
             * @return {?}
             */
            function () {
                self.onTouched();
                self.blur.emit();
            }), 0);
        }));
        if (this._options.immediateAngularModelUpdate) {
            this._editor.on('keyup', (/**
             * @return {?}
             */
            function () {
                setTimeout((/**
                 * @return {?}
                 */
                function () {
                    self.updateModel();
                }), 0);
            }));
        }
    }
    /**
     * @private
     * @return {?}
     */
    createEditor() {
        if (this._editorInitialized) {
            return;
        }
        this.setContent(true);
        /** @type {?} */
        const wait = 50;
        // this.initListeners(); // issue #31
        try {
            this._$element = (/** @type {?} */ ($(this.el.nativeElement)));
        }
        catch (error) {
            console.log(`JQuery seems not te loaded yet! Wait ${wait}ms and try again`);
        }
        if (!this._$element) {
            setTimeout((/**
             * @return {?}
             */
            () => {
                this.createEditor();
            }), wait);
        }
        else {
            // init editor
            this.zone.runOutsideAngular((/**
             * @return {?}
             */
            () => {
                this._editor = this._$element
                    .summernote(this._options)
                    .data('summernote').$note;
                this.initListeners(); // issue #31
                if (this.ngxSummernoteDisabled) {
                    this._$element.summernote('disable');
                }
            }));
            this._editorInitialized = true;
        }
    }
    /**
     * @private
     * @return {?}
     */
    setHtml() {
        this._$element.summernote('code', this._model || '', true);
    }
    /**
     * @private
     * @param {?=} firstTime
     * @return {?}
     */
    setContent(firstTime = false) {
        // console.log('set content', firstTime, this._oldModel, this._model)
        /** @type {?} */
        const self = this;
        // Set initial content
        if (this._model || this._model === '') {
            this._oldModel = this._model;
            if (this._hasSpecialTag) {
                /** @type {?} */
                const tags = this._model;
                // add tags on element
                if (tags) {
                    for (const attr in tags) {
                        if (tags.hasOwnProperty(attr) && attr !== this.INNER_HTML_ATTR) {
                            this._$element.attr(attr, tags[attr]);
                        }
                    }
                    if (tags.hasOwnProperty(this.INNER_HTML_ATTR)) {
                        this._$element[0].innerHTML = tags[this.INNER_HTML_ATTR];
                    }
                }
            }
            else {
                self.setHtml();
            }
        }
    }
    /**
     * @private
     * @return {?}
     */
    destroyEditor() {
        if (this._editorInitialized) {
            this._editor.off('keyup');
            this._$element.summernote('destroy'); // TODO not sure it works now...
            this._editorInitialized = false;
        }
    }
    // private getEditor() {
    //   if (this._$element) {
    //     return this._$element.summernote.bind(this._$element);
    //   }
    //   return null;
    // }
    /**
     * @private
     * @param {?} files
     * @return {?}
     */
    uploadImage(files) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this._options.uploadImagePath) {
                this.imageUpload.emit({ uploading: true });
                /** @type {?} */
                const requests = [];
                for (const file of files) {
                    /** @type {?} */
                    const data = new FormData();
                    data.append('image', file);
                    /** @type {?} */
                    const obs = this.http
                        .post(this._options.uploadImagePath, data, this._options.uploadImageRequestOptions)
                        .pipe(map((/**
                     * @param {?} response
                     * @return {?}
                     */
                    (response) => response && typeof response.path === 'string' && response.path)));
                    requests.push(obs);
                }
                this.uploadSub = combineLatest(requests).subscribe((/**
                 * @param {?} remotePaths
                 * @return {?}
                 */
                (remotePaths) => {
                    for (const remotePath of remotePaths) {
                        this._$element.summernote('insertImage', remotePath);
                    }
                    this.imageUpload.emit({ uploading: false });
                }), (/**
                 * @param {?} err
                 * @return {?}
                 */
                err => this.insertFromDataURL(files)));
            }
            else {
                this.insertFromDataURL(files);
            }
        });
    }
    /**
     * @param {?} files
     * @return {?}
     */
    insertFromDataURL(files) {
        for (const file of files) {
            /** @type {?} */
            const reader = new FileReader();
            reader.readAsDataURL(file);
            reader.onload = (/**
             * @return {?}
             */
            () => {
                this._$element.summernote('insertImage', reader.result);
                this.imageUpload.emit({ uploading: false, encoding: 'base64' });
            });
            reader.onerror = (/**
             * @param {?} error
             * @return {?}
             */
            error => console.error(error));
        }
    }
}
NgxSummernoteDirective.decorators = [
    { type: Directive, args: [{
                // tslint:disable-next-line:directive-selector
                selector: '[ngxSummernote]',
                providers: [
                    {
                        provide: NG_VALUE_ACCESSOR,
                        useExisting: forwardRef((/**
                         * @return {?}
                         */
                        () => NgxSummernoteDirective)),
                        multi: true
                    }
                ]
            },] }
];
/** @nocollapse */
NgxSummernoteDirective.ctorParameters = () => [
    { type: ElementRef },
    { type: NgZone },
    { type: HttpClient }
];
NgxSummernoteDirective.propDecorators = {
    ngxSummernote: [{ type: Input }],
    summernoteModel: [{ type: Input }],
    summernoteModelChange: [{ type: Output }],
    imageUpload: [{ type: Output }],
    mediaDelete: [{ type: Output }],
    blur: [{ type: Output }],
    ngxSummernoteDisabled: [{ type: Input }]
};
if (false) {
    /** @type {?} */
    NgxSummernoteDirective.prototype.summernoteModelChange;
    /** @type {?} */
    NgxSummernoteDirective.prototype.imageUpload;
    /** @type {?} */
    NgxSummernoteDirective.prototype.mediaDelete;
    /** @type {?} */
    NgxSummernoteDirective.prototype.blur;
    /** @type {?} */
    NgxSummernoteDirective.prototype.ngxSummernoteDisabled;
    /**
     * @type {?}
     * @private
     */
    NgxSummernoteDirective.prototype._options;
    /**
     * @type {?}
     * @private
     */
    NgxSummernoteDirective.prototype.SPECIAL_TAGS;
    /**
     * @type {?}
     * @private
     */
    NgxSummernoteDirective.prototype.INNER_HTML_ATTR;
    /**
     * @type {?}
     * @private
     */
    NgxSummernoteDirective.prototype._hasSpecialTag;
    /**
     * @type {?}
     * @private
     */
    NgxSummernoteDirective.prototype._$element;
    /**
     * @type {?}
     * @private
     */
    NgxSummernoteDirective.prototype._editor;
    /**
     * @type {?}
     * @private
     */
    NgxSummernoteDirective.prototype._model;
    /**
     * @type {?}
     * @private
     */
    NgxSummernoteDirective.prototype._oldModel;
    /**
     * @type {?}
     * @private
     */
    NgxSummernoteDirective.prototype._editorInitialized;
    /**
     * @type {?}
     * @private
     */
    NgxSummernoteDirective.prototype.uploadSub;
    /** @type {?} */
    NgxSummernoteDirective.prototype.onChange;
    /** @type {?} */
    NgxSummernoteDirective.prototype.onTouched;
    /**
     * @type {?}
     * @private
     */
    NgxSummernoteDirective.prototype.el;
    /**
     * @type {?}
     * @private
     */
    NgxSummernoteDirective.prototype.zone;
    /**
     * @type {?}
     * @private
     */
    NgxSummernoteDirective.prototype.http;
}

/**
 * @fileoverview added by tsickle
 * Generated from: lib/ngx-summernote-view.directive.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class NgxSummernoteViewDirective {
    /**
     * @param {?} renderer2
     * @param {?} element
     */
    constructor(renderer2, element) {
        this.renderer2 = renderer2;
        this._element = element.nativeElement;
    }
    /**
     * @param {?} content
     * @return {?}
     */
    set ngxSummernoteView(content) {
        this._element.innerHTML = content || '';
    }
    /**
     * @return {?}
     */
    ngAfterViewInit() {
        this.renderer2.addClass(this._element, 'ngx-summernote-view');
    }
}
NgxSummernoteViewDirective.decorators = [
    { type: Directive, args: [{
                // tslint:disable-next-line:directive-selector
                selector: '[ngxSummernoteView]'
            },] }
];
/** @nocollapse */
NgxSummernoteViewDirective.ctorParameters = () => [
    { type: Renderer2 },
    { type: ElementRef }
];
NgxSummernoteViewDirective.propDecorators = {
    ngxSummernoteView: [{ type: Input }]
};
if (false) {
    /**
     * @type {?}
     * @private
     */
    NgxSummernoteViewDirective.prototype._element;
    /**
     * @type {?}
     * @private
     */
    NgxSummernoteViewDirective.prototype.renderer2;
}

/**
 * @fileoverview added by tsickle
 * Generated from: lib/ngx-summernote.module.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class NgxSummernoteModule {
    /**
     * @return {?}
     */
    static forRoot() {
        return { ngModule: NgxSummernoteModule, providers: [] };
    }
}
NgxSummernoteModule.decorators = [
    { type: NgModule, args: [{
                declarations: [
                    NgxSummernoteDirective,
                    NgxSummernoteViewDirective
                ],
                exports: [
                    NgxSummernoteDirective,
                    NgxSummernoteViewDirective
                ]
            },] }
];

/**
 * @fileoverview added by tsickle
 * Generated from: public_api.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * Generated from: ngx-summernote.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */

export { NgxSummernoteDirective, NgxSummernoteModule, NgxSummernoteViewDirective, codeBlockButton };
//# sourceMappingURL=ngx-summernote.js.map
