/**
 * @fileoverview added by tsickle
 * Generated from: lib/ngx-summernote.directive.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import * as tslib_1 from "tslib";
import { HttpClient } from '@angular/common/http';
import { Directive, ElementRef, EventEmitter, forwardRef, Input, NgZone, Output } from '@angular/core';
import { NG_VALUE_ACCESSOR } from '@angular/forms';
import { combineLatest } from 'rxjs';
import { map } from 'rxjs/operators';
import { codeBlockButton } from './code-block.button';
export class NgxSummernoteDirective {
    /**
     * @param {?} el
     * @param {?} zone
     * @param {?} http
     */
    constructor(el, zone, http) {
        this.el = el;
        this.zone = zone;
        this.http = http;
        // summernoteModel directive as output: update model if editor contentChanged
        this.summernoteModelChange = new EventEmitter();
        this.imageUpload = new EventEmitter();
        this.mediaDelete = new EventEmitter();
        // // summernoteInit directive as output: send manual editor initialization
        // @Output() summernoteInit: EventEmitter<Object> = new EventEmitter<Object>();
        this.blur = new EventEmitter();
        this._options = {};
        this.SPECIAL_TAGS = ['img', 'button', 'input', 'a'];
        this.INNER_HTML_ATTR = 'innerHTML';
        this._oldModel = null;
        // Begin ControlValueAccesor methods.
        this.onChange = (/**
         * @param {?} _
         * @return {?}
         */
        (_) => { });
        this.onTouched = (/**
         * @return {?}
         */
        () => { });
        /** @type {?} */
        const element = el.nativeElement;
        // check if the element is a special tag
        if (this.SPECIAL_TAGS.indexOf(element.tagName.toLowerCase()) !== -1) {
            this._hasSpecialTag = true;
        }
        // jquery wrap and store element
        // this._$element = <any>$(element);
        this.zone = zone;
    }
    /**
     * @param {?} options
     * @return {?}
     */
    set ngxSummernote(options) {
        if (options) {
            if (!options.buttons) {
                options.buttons = {};
            }
            options.callbacks = Object.assign({}, options.callbacks, { onImageUpload: (/**
                 * @param {?} files
                 * @return {?}
                 */
                files => this.uploadImage(files)), onMediaDelete: (/**
                 * @param {?} files
                 * @return {?}
                 */
                files => this.mediaDelete.emit({ url: $(files[0]).attr('src') })) });
            // add custom buttons
            options.buttons.codeBlock = codeBlockButton;
            Object.assign(this._options, options);
        }
    }
    // summernoteModel directive as input: store initial editor content
    /**
     * @param {?} content
     * @return {?}
     */
    set summernoteModel(content) {
        this.updateEditor(content);
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        this.createEditor();
    }
    /**
     * @param {?} changes
     * @return {?}
     */
    ngOnChanges(changes) {
        if (this._editorInitialized && changes) {
            if (changes.ngxSummernoteDisabled &&
                !changes.ngxSummernoteDisabled.firstChange &&
                changes.ngxSummernoteDisabled.currentValue !==
                    changes.ngxSummernoteDisabled.previousValue) {
                if (changes.ngxSummernoteDisabled.currentValue) {
                    this._$element.summernote('disable');
                }
                else {
                    this._$element.summernote('enable');
                }
            }
        }
    }
    /**
     * @return {?}
     */
    ngOnDestroy() {
        this.destroyEditor();
        if (this.uploadSub) {
            this.uploadSub.unsubscribe();
        }
    }
    // Form model content changed.
    /**
     * @param {?} content
     * @return {?}
     */
    writeValue(content) {
        this.updateEditor(content);
    }
    /**
     * @param {?} fn
     * @return {?}
     */
    registerOnChange(fn) {
        this.onChange = fn;
    }
    /**
     * @param {?} fn
     * @return {?}
     */
    registerOnTouched(fn) {
        this.onTouched = fn;
    }
    // Update editor with model contents.
    /**
     * @private
     * @param {?} content
     * @return {?}
     */
    updateEditor(content) {
        if (JSON.stringify(this._oldModel) === JSON.stringify(content)) {
            return;
        }
        this._oldModel = content;
        // this._$element.html(content);
        if (this._editorInitialized) {
            this._$element.summernote('code', content);
        }
        else {
            this._$element.html(content);
        }
    }
    // update model if editor contentChanged
    /**
     * @private
     * @param {?=} content
     * @return {?}
     */
    updateModel(content) {
        // console.log('update model', content)
        this.zone.run((/**
         * @return {?}
         */
        () => {
            /** @type {?} */
            let modelContent = null;
            if (this._hasSpecialTag) {
                /** @type {?} */
                const attributeNodes = this._$element[0].attributes;
                /** @type {?} */
                const attrs = {};
                for (let i = 0; i < attributeNodes.length; i++) {
                    /** @type {?} */
                    const attrName = attributeNodes[i].name;
                    if (this._options.angularIgnoreAttrs &&
                        this._options.angularIgnoreAttrs.indexOf(attrName) !== -1) {
                        continue;
                    }
                    attrs[attrName] = attributeNodes[i].value;
                }
                if (this._$element[0].innerHTML) {
                    attrs[this.INNER_HTML_ATTR] = this._$element[0].innerHTML;
                }
                modelContent = attrs;
            }
            else {
                /** @type {?} */
                const returnedHtml = content || '';
                if (typeof returnedHtml === 'string') {
                    modelContent = returnedHtml;
                }
            }
            if (this._oldModel !== modelContent) {
                this._oldModel = modelContent;
                // Update summernoteModel
                this.summernoteModelChange.emit(modelContent);
                // Update form model.
                this.onChange(content);
            }
        }));
    }
    /**
     * @private
     * @return {?}
     */
    initListeners() {
        /** @type {?} */
        const self = this;
        if (!this._$element) {
            return;
        }
        this._$element.on('summernote.init', (/**
         * @return {?}
         */
        function () {
            setTimeout((/**
             * @return {?}
             */
            function () {
                self.updateModel();
            }), 0);
        }));
        this._$element.on('summernote.change', (/**
         * @param {?} event
         * @param {?} contents
         * @param {?} $editable
         * @return {?}
         */
        function (event, contents, $editable) {
            setTimeout((/**
             * @return {?}
             */
            function () {
                self.updateModel(contents);
            }), 0);
        }));
        this._$element.on('summernote.blur', (/**
         * @return {?}
         */
        function () {
            setTimeout((/**
             * @return {?}
             */
            function () {
                self.onTouched();
                self.blur.emit();
            }), 0);
        }));
        if (this._options.immediateAngularModelUpdate) {
            this._editor.on('keyup', (/**
             * @return {?}
             */
            function () {
                setTimeout((/**
                 * @return {?}
                 */
                function () {
                    self.updateModel();
                }), 0);
            }));
        }
    }
    /**
     * @private
     * @return {?}
     */
    createEditor() {
        if (this._editorInitialized) {
            return;
        }
        this.setContent(true);
        /** @type {?} */
        const wait = 50;
        // this.initListeners(); // issue #31
        try {
            this._$element = (/** @type {?} */ ($(this.el.nativeElement)));
        }
        catch (error) {
            console.log(`JQuery seems not te loaded yet! Wait ${wait}ms and try again`);
        }
        if (!this._$element) {
            setTimeout((/**
             * @return {?}
             */
            () => {
                this.createEditor();
            }), wait);
        }
        else {
            // init editor
            this.zone.runOutsideAngular((/**
             * @return {?}
             */
            () => {
                this._editor = this._$element
                    .summernote(this._options)
                    .data('summernote').$note;
                this.initListeners(); // issue #31
                if (this.ngxSummernoteDisabled) {
                    this._$element.summernote('disable');
                }
            }));
            this._editorInitialized = true;
        }
    }
    /**
     * @private
     * @return {?}
     */
    setHtml() {
        this._$element.summernote('code', this._model || '', true);
    }
    /**
     * @private
     * @param {?=} firstTime
     * @return {?}
     */
    setContent(firstTime = false) {
        // console.log('set content', firstTime, this._oldModel, this._model)
        /** @type {?} */
        const self = this;
        // Set initial content
        if (this._model || this._model === '') {
            this._oldModel = this._model;
            if (this._hasSpecialTag) {
                /** @type {?} */
                const tags = this._model;
                // add tags on element
                if (tags) {
                    for (const attr in tags) {
                        if (tags.hasOwnProperty(attr) && attr !== this.INNER_HTML_ATTR) {
                            this._$element.attr(attr, tags[attr]);
                        }
                    }
                    if (tags.hasOwnProperty(this.INNER_HTML_ATTR)) {
                        this._$element[0].innerHTML = tags[this.INNER_HTML_ATTR];
                    }
                }
            }
            else {
                self.setHtml();
            }
        }
    }
    /**
     * @private
     * @return {?}
     */
    destroyEditor() {
        if (this._editorInitialized) {
            this._editor.off('keyup');
            this._$element.summernote('destroy'); // TODO not sure it works now...
            this._editorInitialized = false;
        }
    }
    // private getEditor() {
    //   if (this._$element) {
    //     return this._$element.summernote.bind(this._$element);
    //   }
    //   return null;
    // }
    /**
     * @private
     * @param {?} files
     * @return {?}
     */
    uploadImage(files) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            if (this._options.uploadImagePath) {
                this.imageUpload.emit({ uploading: true });
                /** @type {?} */
                const requests = [];
                for (const file of files) {
                    /** @type {?} */
                    const data = new FormData();
                    data.append('image', file);
                    /** @type {?} */
                    const obs = this.http
                        .post(this._options.uploadImagePath, data, this._options.uploadImageRequestOptions)
                        .pipe(map((/**
                     * @param {?} response
                     * @return {?}
                     */
                    (response) => response && typeof response.path === 'string' && response.path)));
                    requests.push(obs);
                }
                this.uploadSub = combineLatest(requests).subscribe((/**
                 * @param {?} remotePaths
                 * @return {?}
                 */
                (remotePaths) => {
                    for (const remotePath of remotePaths) {
                        this._$element.summernote('insertImage', remotePath);
                    }
                    this.imageUpload.emit({ uploading: false });
                }), (/**
                 * @param {?} err
                 * @return {?}
                 */
                err => this.insertFromDataURL(files)));
            }
            else {
                this.insertFromDataURL(files);
            }
        });
    }
    /**
     * @param {?} files
     * @return {?}
     */
    insertFromDataURL(files) {
        for (const file of files) {
            /** @type {?} */
            const reader = new FileReader();
            reader.readAsDataURL(file);
            reader.onload = (/**
             * @return {?}
             */
            () => {
                this._$element.summernote('insertImage', reader.result);
                this.imageUpload.emit({ uploading: false, encoding: 'base64' });
            });
            reader.onerror = (/**
             * @param {?} error
             * @return {?}
             */
            error => console.error(error));
        }
    }
}
NgxSummernoteDirective.decorators = [
    { type: Directive, args: [{
                // tslint:disable-next-line:directive-selector
                selector: '[ngxSummernote]',
                providers: [
                    {
                        provide: NG_VALUE_ACCESSOR,
                        useExisting: forwardRef((/**
                         * @return {?}
                         */
                        () => NgxSummernoteDirective)),
                        multi: true
                    }
                ]
            },] }
];
/** @nocollapse */
NgxSummernoteDirective.ctorParameters = () => [
    { type: ElementRef },
    { type: NgZone },
    { type: HttpClient }
];
NgxSummernoteDirective.propDecorators = {
    ngxSummernote: [{ type: Input }],
    summernoteModel: [{ type: Input }],
    summernoteModelChange: [{ type: Output }],
    imageUpload: [{ type: Output }],
    mediaDelete: [{ type: Output }],
    blur: [{ type: Output }],
    ngxSummernoteDisabled: [{ type: Input }]
};
if (false) {
    /** @type {?} */
    NgxSummernoteDirective.prototype.summernoteModelChange;
    /** @type {?} */
    NgxSummernoteDirective.prototype.imageUpload;
    /** @type {?} */
    NgxSummernoteDirective.prototype.mediaDelete;
    /** @type {?} */
    NgxSummernoteDirective.prototype.blur;
    /** @type {?} */
    NgxSummernoteDirective.prototype.ngxSummernoteDisabled;
    /**
     * @type {?}
     * @private
     */
    NgxSummernoteDirective.prototype._options;
    /**
     * @type {?}
     * @private
     */
    NgxSummernoteDirective.prototype.SPECIAL_TAGS;
    /**
     * @type {?}
     * @private
     */
    NgxSummernoteDirective.prototype.INNER_HTML_ATTR;
    /**
     * @type {?}
     * @private
     */
    NgxSummernoteDirective.prototype._hasSpecialTag;
    /**
     * @type {?}
     * @private
     */
    NgxSummernoteDirective.prototype._$element;
    /**
     * @type {?}
     * @private
     */
    NgxSummernoteDirective.prototype._editor;
    /**
     * @type {?}
     * @private
     */
    NgxSummernoteDirective.prototype._model;
    /**
     * @type {?}
     * @private
     */
    NgxSummernoteDirective.prototype._oldModel;
    /**
     * @type {?}
     * @private
     */
    NgxSummernoteDirective.prototype._editorInitialized;
    /**
     * @type {?}
     * @private
     */
    NgxSummernoteDirective.prototype.uploadSub;
    /** @type {?} */
    NgxSummernoteDirective.prototype.onChange;
    /** @type {?} */
    NgxSummernoteDirective.prototype.onTouched;
    /**
     * @type {?}
     * @private
     */
    NgxSummernoteDirective.prototype.el;
    /**
     * @type {?}
     * @private
     */
    NgxSummernoteDirective.prototype.zone;
    /**
     * @type {?}
     * @private
     */
    NgxSummernoteDirective.prototype.http;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibmd4LXN1bW1lcm5vdGUuZGlyZWN0aXZlLmpzIiwic291cmNlUm9vdCI6Im5nOi8vbmd4LXN1bW1lcm5vdGUvIiwic291cmNlcyI6WyJsaWIvbmd4LXN1bW1lcm5vdGUuZGlyZWN0aXZlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7OztBQUFBLE9BQU8sRUFBRSxVQUFVLEVBQUUsTUFBTSxzQkFBc0IsQ0FBQztBQUNsRCxPQUFPLEVBQ0wsU0FBUyxFQUNULFVBQVUsRUFDVixZQUFZLEVBQ1osVUFBVSxFQUNWLEtBQUssRUFDTCxNQUFNLEVBSU4sTUFBTSxFQUNQLE1BQU0sZUFBZSxDQUFDO0FBQ3ZCLE9BQU8sRUFBd0IsaUJBQWlCLEVBQUUsTUFBTSxnQkFBZ0IsQ0FBQztBQUN6RSxPQUFPLEVBQUUsYUFBYSxFQUFnQixNQUFNLE1BQU0sQ0FBQztBQUNuRCxPQUFPLEVBQUUsR0FBRyxFQUFFLE1BQU0sZ0JBQWdCLENBQUM7QUFHckMsT0FBTyxFQUFFLGVBQWUsRUFBRSxNQUFNLHFCQUFxQixDQUFDO0FBZXRELE1BQU0sT0FBTyxzQkFBc0I7Ozs7OztJQW9EakMsWUFDVSxFQUFjLEVBQ2QsSUFBWSxFQUNaLElBQWdCO1FBRmhCLE9BQUUsR0FBRixFQUFFLENBQVk7UUFDZCxTQUFJLEdBQUosSUFBSSxDQUFRO1FBQ1osU0FBSSxHQUFKLElBQUksQ0FBWTs7UUEzQmhCLDBCQUFxQixHQUFzQixJQUFJLFlBQVksRUFBTyxDQUFDO1FBQ25FLGdCQUFXLEdBQXNCLElBQUksWUFBWSxFQUFPLENBQUM7UUFDekQsZ0JBQVcsR0FBc0IsSUFBSSxZQUFZLEVBQU8sQ0FBQzs7O1FBS3pELFNBQUksR0FBc0IsSUFBSSxZQUFZLEVBQU8sQ0FBQztRQUlwRCxhQUFRLEdBQXNCLEVBQUUsQ0FBQztRQUVqQyxpQkFBWSxHQUFhLENBQUMsS0FBSyxFQUFFLFFBQVEsRUFBRSxPQUFPLEVBQUUsR0FBRyxDQUFDLENBQUM7UUFDekQsb0JBQWUsR0FBRyxXQUFXLENBQUM7UUFLOUIsY0FBUyxHQUFXLElBQUksQ0FBQzs7UUFxRGpDLGFBQVE7Ozs7UUFBRyxDQUFDLENBQU0sRUFBRSxFQUFFLEdBQUUsQ0FBQyxFQUFDO1FBQzFCLGNBQVM7OztRQUFHLEdBQUcsRUFBRSxHQUFFLENBQUMsRUFBQzs7Y0E1Q2IsT0FBTyxHQUFRLEVBQUUsQ0FBQyxhQUFhO1FBRXJDLHdDQUF3QztRQUN4QyxJQUFJLElBQUksQ0FBQyxZQUFZLENBQUMsT0FBTyxDQUFDLE9BQU8sQ0FBQyxPQUFPLENBQUMsV0FBVyxFQUFFLENBQUMsS0FBSyxDQUFDLENBQUMsRUFBRTtZQUNuRSxJQUFJLENBQUMsY0FBYyxHQUFHLElBQUksQ0FBQztTQUM1QjtRQUVELGdDQUFnQztRQUVoQyxvQ0FBb0M7UUFFcEMsSUFBSSxDQUFDLElBQUksR0FBRyxJQUFJLENBQUM7SUFDbkIsQ0FBQzs7Ozs7SUFuRUQsSUFBYSxhQUFhLENBQUMsT0FBMEI7UUFDbkQsSUFBSSxPQUFPLEVBQUU7WUFDWCxJQUFJLENBQUMsT0FBTyxDQUFDLE9BQU8sRUFBRTtnQkFDcEIsT0FBTyxDQUFDLE9BQU8sR0FBRyxFQUFFLENBQUM7YUFDdEI7WUFFRCxPQUFPLENBQUMsU0FBUyxxQkFDWixPQUFPLENBQUMsU0FBUyxJQUNwQixhQUFhOzs7O2dCQUFFLEtBQUssQ0FBQyxFQUFFLENBQUMsSUFBSSxDQUFDLFdBQVcsQ0FBQyxLQUFLLENBQUMsR0FDL0MsYUFBYTs7OztnQkFBRSxLQUFLLENBQUMsRUFBRSxDQUNyQixJQUFJLENBQUMsV0FBVyxDQUFDLElBQUksQ0FBQyxFQUFFLEdBQUcsRUFBRSxDQUFDLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxFQUFFLENBQUMsSUFDMUQsQ0FBQztZQUVGLHFCQUFxQjtZQUNyQixPQUFPLENBQUMsT0FBTyxDQUFDLFNBQVMsR0FBRyxlQUFlLENBQUM7WUFFNUMsTUFBTSxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsUUFBUSxFQUFFLE9BQU8sQ0FBQyxDQUFDO1NBQ3ZDO0lBQ0gsQ0FBQzs7Ozs7O0lBR0QsSUFBYSxlQUFlLENBQUMsT0FBWTtRQUN2QyxJQUFJLENBQUMsWUFBWSxDQUFDLE9BQU8sQ0FBQyxDQUFDO0lBQzdCLENBQUM7Ozs7SUE4Q0QsUUFBUTtRQUNOLElBQUksQ0FBQyxZQUFZLEVBQUUsQ0FBQztJQUN0QixDQUFDOzs7OztJQUVELFdBQVcsQ0FBQyxPQUFPO1FBQ2pCLElBQUksSUFBSSxDQUFDLGtCQUFrQixJQUFJLE9BQU8sRUFBRTtZQUN0QyxJQUNFLE9BQU8sQ0FBQyxxQkFBcUI7Z0JBQzdCLENBQUMsT0FBTyxDQUFDLHFCQUFxQixDQUFDLFdBQVc7Z0JBQzFDLE9BQU8sQ0FBQyxxQkFBcUIsQ0FBQyxZQUFZO29CQUN4QyxPQUFPLENBQUMscUJBQXFCLENBQUMsYUFBYSxFQUM3QztnQkFDQSxJQUFJLE9BQU8sQ0FBQyxxQkFBcUIsQ0FBQyxZQUFZLEVBQUU7b0JBQzlDLElBQUksQ0FBQyxTQUFTLENBQUMsVUFBVSxDQUFDLFNBQVMsQ0FBQyxDQUFDO2lCQUN0QztxQkFBTTtvQkFDTCxJQUFJLENBQUMsU0FBUyxDQUFDLFVBQVUsQ0FBQyxRQUFRLENBQUMsQ0FBQztpQkFDckM7YUFDRjtTQUNGO0lBQ0gsQ0FBQzs7OztJQUVELFdBQVc7UUFDVCxJQUFJLENBQUMsYUFBYSxFQUFFLENBQUM7UUFDckIsSUFBSSxJQUFJLENBQUMsU0FBUyxFQUFFO1lBQ2xCLElBQUksQ0FBQyxTQUFTLENBQUMsV0FBVyxFQUFFLENBQUM7U0FDOUI7SUFDSCxDQUFDOzs7Ozs7SUFPRCxVQUFVLENBQUMsT0FBWTtRQUNyQixJQUFJLENBQUMsWUFBWSxDQUFDLE9BQU8sQ0FBQyxDQUFDO0lBQzdCLENBQUM7Ozs7O0lBRUQsZ0JBQWdCLENBQUMsRUFBb0I7UUFDbkMsSUFBSSxDQUFDLFFBQVEsR0FBRyxFQUFFLENBQUM7SUFDckIsQ0FBQzs7Ozs7SUFDRCxpQkFBaUIsQ0FBQyxFQUFjO1FBQzlCLElBQUksQ0FBQyxTQUFTLEdBQUcsRUFBRSxDQUFDO0lBQ3RCLENBQUM7Ozs7Ozs7SUFHTyxZQUFZLENBQUMsT0FBWTtRQUMvQixJQUFJLElBQUksQ0FBQyxTQUFTLENBQUMsSUFBSSxDQUFDLFNBQVMsQ0FBQyxLQUFLLElBQUksQ0FBQyxTQUFTLENBQUMsT0FBTyxDQUFDLEVBQUU7WUFDOUQsT0FBTztTQUNSO1FBRUQsSUFBSSxDQUFDLFNBQVMsR0FBRyxPQUFPLENBQUM7UUFDekIsZ0NBQWdDO1FBRWhDLElBQUksSUFBSSxDQUFDLGtCQUFrQixFQUFFO1lBQzNCLElBQUksQ0FBQyxTQUFTLENBQUMsVUFBVSxDQUFDLE1BQU0sRUFBRSxPQUFPLENBQUMsQ0FBQztTQUM1QzthQUFNO1lBQ0wsSUFBSSxDQUFDLFNBQVMsQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLENBQUM7U0FDOUI7SUFDSCxDQUFDOzs7Ozs7O0lBR08sV0FBVyxDQUFDLE9BQWE7UUFDL0IsdUNBQXVDO1FBQ3ZDLElBQUksQ0FBQyxJQUFJLENBQUMsR0FBRzs7O1FBQUMsR0FBRyxFQUFFOztnQkFDYixZQUFZLEdBQVEsSUFBSTtZQUU1QixJQUFJLElBQUksQ0FBQyxjQUFjLEVBQUU7O3NCQUNqQixjQUFjLEdBQUcsSUFBSSxDQUFDLFNBQVMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxVQUFVOztzQkFDN0MsS0FBSyxHQUFHLEVBQUU7Z0JBRWhCLEtBQUssSUFBSSxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsR0FBRyxjQUFjLENBQUMsTUFBTSxFQUFFLENBQUMsRUFBRSxFQUFFOzswQkFDeEMsUUFBUSxHQUFHLGNBQWMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxJQUFJO29CQUN2QyxJQUNFLElBQUksQ0FBQyxRQUFRLENBQUMsa0JBQWtCO3dCQUNoQyxJQUFJLENBQUMsUUFBUSxDQUFDLGtCQUFrQixDQUFDLE9BQU8sQ0FBQyxRQUFRLENBQUMsS0FBSyxDQUFDLENBQUMsRUFDekQ7d0JBQ0EsU0FBUztxQkFDVjtvQkFDRCxLQUFLLENBQUMsUUFBUSxDQUFDLEdBQUcsY0FBYyxDQUFDLENBQUMsQ0FBQyxDQUFDLEtBQUssQ0FBQztpQkFDM0M7Z0JBRUQsSUFBSSxJQUFJLENBQUMsU0FBUyxDQUFDLENBQUMsQ0FBQyxDQUFDLFNBQVMsRUFBRTtvQkFDL0IsS0FBSyxDQUFDLElBQUksQ0FBQyxlQUFlLENBQUMsR0FBRyxJQUFJLENBQUMsU0FBUyxDQUFDLENBQUMsQ0FBQyxDQUFDLFNBQVMsQ0FBQztpQkFDM0Q7Z0JBRUQsWUFBWSxHQUFHLEtBQUssQ0FBQzthQUN0QjtpQkFBTTs7c0JBQ0MsWUFBWSxHQUFRLE9BQU8sSUFBSSxFQUFFO2dCQUN2QyxJQUFJLE9BQU8sWUFBWSxLQUFLLFFBQVEsRUFBRTtvQkFDcEMsWUFBWSxHQUFHLFlBQVksQ0FBQztpQkFDN0I7YUFDRjtZQUNELElBQUksSUFBSSxDQUFDLFNBQVMsS0FBSyxZQUFZLEVBQUU7Z0JBQ25DLElBQUksQ0FBQyxTQUFTLEdBQUcsWUFBWSxDQUFDO2dCQUM5Qix5QkFBeUI7Z0JBQ3pCLElBQUksQ0FBQyxxQkFBcUIsQ0FBQyxJQUFJLENBQUMsWUFBWSxDQUFDLENBQUM7Z0JBQzlDLHFCQUFxQjtnQkFDckIsSUFBSSxDQUFDLFFBQVEsQ0FBQyxPQUFPLENBQUMsQ0FBQzthQUN4QjtRQUNILENBQUMsRUFBQyxDQUFDO0lBQ0wsQ0FBQzs7Ozs7SUFFTyxhQUFhOztjQUNiLElBQUksR0FBRyxJQUFJO1FBRWpCLElBQUksQ0FBQyxJQUFJLENBQUMsU0FBUyxFQUFFO1lBQ25CLE9BQU87U0FDUjtRQUVELElBQUksQ0FBQyxTQUFTLENBQUMsRUFBRSxDQUFDLGlCQUFpQjs7O1FBQUU7WUFDbkMsVUFBVTs7O1lBQUM7Z0JBQ1QsSUFBSSxDQUFDLFdBQVcsRUFBRSxDQUFDO1lBQ3JCLENBQUMsR0FBRSxDQUFDLENBQUMsQ0FBQztRQUNSLENBQUMsRUFBQyxDQUFDO1FBRUgsSUFBSSxDQUFDLFNBQVMsQ0FBQyxFQUFFLENBQUMsbUJBQW1COzs7Ozs7UUFBRSxVQUNyQyxLQUFLLEVBQ0wsUUFBUSxFQUNSLFNBQVM7WUFFVCxVQUFVOzs7WUFBQztnQkFDVCxJQUFJLENBQUMsV0FBVyxDQUFDLFFBQVEsQ0FBQyxDQUFDO1lBQzdCLENBQUMsR0FBRSxDQUFDLENBQUMsQ0FBQztRQUNSLENBQUMsRUFBQyxDQUFDO1FBRUgsSUFBSSxDQUFDLFNBQVMsQ0FBQyxFQUFFLENBQUMsaUJBQWlCOzs7UUFBRTtZQUNuQyxVQUFVOzs7WUFBQztnQkFDVCxJQUFJLENBQUMsU0FBUyxFQUFFLENBQUM7Z0JBQ2pCLElBQUksQ0FBQyxJQUFJLENBQUMsSUFBSSxFQUFFLENBQUM7WUFDbkIsQ0FBQyxHQUFFLENBQUMsQ0FBQyxDQUFDO1FBQ1IsQ0FBQyxFQUFDLENBQUM7UUFFSCxJQUFJLElBQUksQ0FBQyxRQUFRLENBQUMsMkJBQTJCLEVBQUU7WUFDN0MsSUFBSSxDQUFDLE9BQU8sQ0FBQyxFQUFFLENBQUMsT0FBTzs7O1lBQUU7Z0JBQ3ZCLFVBQVU7OztnQkFBQztvQkFDVCxJQUFJLENBQUMsV0FBVyxFQUFFLENBQUM7Z0JBQ3JCLENBQUMsR0FBRSxDQUFDLENBQUMsQ0FBQztZQUNSLENBQUMsRUFBQyxDQUFDO1NBQ0o7SUFDSCxDQUFDOzs7OztJQUVPLFlBQVk7UUFDbEIsSUFBSSxJQUFJLENBQUMsa0JBQWtCLEVBQUU7WUFDM0IsT0FBTztTQUNSO1FBRUQsSUFBSSxDQUFDLFVBQVUsQ0FBQyxJQUFJLENBQUMsQ0FBQzs7Y0FFaEIsSUFBSSxHQUFHLEVBQUU7UUFDZixxQ0FBcUM7UUFDckMsSUFBSTtZQUNGLElBQUksQ0FBQyxTQUFTLEdBQUcsbUJBQUssQ0FBQyxDQUFDLElBQUksQ0FBQyxFQUFFLENBQUMsYUFBYSxDQUFDLEVBQUEsQ0FBQztTQUNoRDtRQUFDLE9BQU8sS0FBSyxFQUFFO1lBQ2QsT0FBTyxDQUFDLEdBQUcsQ0FBQyx3Q0FBd0MsSUFBSSxrQkFBa0IsQ0FBQyxDQUFDO1NBQzdFO1FBRUQsSUFBSSxDQUFDLElBQUksQ0FBQyxTQUFTLEVBQUU7WUFDbkIsVUFBVTs7O1lBQUMsR0FBRyxFQUFFO2dCQUNkLElBQUksQ0FBQyxZQUFZLEVBQUUsQ0FBQztZQUN0QixDQUFDLEdBQUUsSUFBSSxDQUFDLENBQUM7U0FDVjthQUFNO1lBQ0wsY0FBYztZQUNkLElBQUksQ0FBQyxJQUFJLENBQUMsaUJBQWlCOzs7WUFBQyxHQUFHLEVBQUU7Z0JBQy9CLElBQUksQ0FBQyxPQUFPLEdBQUcsSUFBSSxDQUFDLFNBQVM7cUJBQzFCLFVBQVUsQ0FBQyxJQUFJLENBQUMsUUFBUSxDQUFDO3FCQUN6QixJQUFJLENBQUMsWUFBWSxDQUFDLENBQUMsS0FBSyxDQUFDO2dCQUU1QixJQUFJLENBQUMsYUFBYSxFQUFFLENBQUMsQ0FBQyxZQUFZO2dCQUVsQyxJQUFJLElBQUksQ0FBQyxxQkFBcUIsRUFBRTtvQkFDOUIsSUFBSSxDQUFDLFNBQVMsQ0FBQyxVQUFVLENBQUMsU0FBUyxDQUFDLENBQUM7aUJBQ3RDO1lBQ0gsQ0FBQyxFQUFDLENBQUM7WUFDSCxJQUFJLENBQUMsa0JBQWtCLEdBQUcsSUFBSSxDQUFDO1NBQ2hDO0lBQ0gsQ0FBQzs7Ozs7SUFFTyxPQUFPO1FBQ2IsSUFBSSxDQUFDLFNBQVMsQ0FBQyxVQUFVLENBQUMsTUFBTSxFQUFFLElBQUksQ0FBQyxNQUFNLElBQUksRUFBRSxFQUFFLElBQUksQ0FBQyxDQUFDO0lBQzdELENBQUM7Ozs7OztJQUVPLFVBQVUsQ0FBQyxTQUFTLEdBQUcsS0FBSzs7O2NBRTVCLElBQUksR0FBRyxJQUFJO1FBQ2pCLHNCQUFzQjtRQUN0QixJQUFJLElBQUksQ0FBQyxNQUFNLElBQUksSUFBSSxDQUFDLE1BQU0sS0FBSyxFQUFFLEVBQUU7WUFDckMsSUFBSSxDQUFDLFNBQVMsR0FBRyxJQUFJLENBQUMsTUFBTSxDQUFDO1lBQzdCLElBQUksSUFBSSxDQUFDLGNBQWMsRUFBRTs7c0JBQ2pCLElBQUksR0FBVyxJQUFJLENBQUMsTUFBTTtnQkFDaEMsc0JBQXNCO2dCQUN0QixJQUFJLElBQUksRUFBRTtvQkFDUixLQUFLLE1BQU0sSUFBSSxJQUFJLElBQUksRUFBRTt3QkFDdkIsSUFBSSxJQUFJLENBQUMsY0FBYyxDQUFDLElBQUksQ0FBQyxJQUFJLElBQUksS0FBSyxJQUFJLENBQUMsZUFBZSxFQUFFOzRCQUM5RCxJQUFJLENBQUMsU0FBUyxDQUFDLElBQUksQ0FBQyxJQUFJLEVBQUUsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUM7eUJBQ3ZDO3FCQUNGO29CQUVELElBQUksSUFBSSxDQUFDLGNBQWMsQ0FBQyxJQUFJLENBQUMsZUFBZSxDQUFDLEVBQUU7d0JBQzdDLElBQUksQ0FBQyxTQUFTLENBQUMsQ0FBQyxDQUFDLENBQUMsU0FBUyxHQUFHLElBQUksQ0FBQyxJQUFJLENBQUMsZUFBZSxDQUFDLENBQUM7cUJBQzFEO2lCQUNGO2FBQ0Y7aUJBQU07Z0JBQ0wsSUFBSSxDQUFDLE9BQU8sRUFBRSxDQUFDO2FBQ2hCO1NBQ0Y7SUFDSCxDQUFDOzs7OztJQUVPLGFBQWE7UUFDbkIsSUFBSSxJQUFJLENBQUMsa0JBQWtCLEVBQUU7WUFDM0IsSUFBSSxDQUFDLE9BQU8sQ0FBQyxHQUFHLENBQUMsT0FBTyxDQUFDLENBQUM7WUFDMUIsSUFBSSxDQUFDLFNBQVMsQ0FBQyxVQUFVLENBQUMsU0FBUyxDQUFDLENBQUMsQ0FBQyxnQ0FBZ0M7WUFDdEUsSUFBSSxDQUFDLGtCQUFrQixHQUFHLEtBQUssQ0FBQztTQUNqQztJQUNILENBQUM7Ozs7Ozs7Ozs7OztJQVVhLFdBQVcsQ0FBQyxLQUFLOztZQUM3QixJQUFJLElBQUksQ0FBQyxRQUFRLENBQUMsZUFBZSxFQUFFO2dCQUNqQyxJQUFJLENBQUMsV0FBVyxDQUFDLElBQUksQ0FBQyxFQUFFLFNBQVMsRUFBRSxJQUFJLEVBQUUsQ0FBQyxDQUFDOztzQkFFckMsUUFBUSxHQUFHLEVBQUU7Z0JBQ25CLEtBQUssTUFBTSxJQUFJLElBQUksS0FBSyxFQUFFOzswQkFDbEIsSUFBSSxHQUFHLElBQUksUUFBUSxFQUFFO29CQUMzQixJQUFJLENBQUMsTUFBTSxDQUFDLE9BQU8sRUFBRSxJQUFJLENBQUMsQ0FBQzs7MEJBQ3JCLEdBQUcsR0FBRyxJQUFJLENBQUMsSUFBSTt5QkFDbEIsSUFBSSxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsZUFBZSxFQUFFLElBQUksRUFBRSxJQUFJLENBQUMsUUFBUSxDQUFDLHlCQUF5QixDQUFDO3lCQUNsRixJQUFJLENBQ0gsR0FBRzs7OztvQkFDRCxDQUFDLFFBQTBCLEVBQUUsRUFBRSxDQUM3QixRQUFRLElBQUksT0FBTyxRQUFRLENBQUMsSUFBSSxLQUFLLFFBQVEsSUFBSSxRQUFRLENBQUMsSUFBSSxFQUNqRSxDQUNGO29CQUNILFFBQVEsQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLENBQUM7aUJBQ3BCO2dCQUVELElBQUksQ0FBQyxTQUFTLEdBQUcsYUFBYSxDQUFDLFFBQVEsQ0FBQyxDQUFDLFNBQVM7Ozs7Z0JBQ2hELENBQUMsV0FBcUIsRUFBRSxFQUFFO29CQUN4QixLQUFLLE1BQU0sVUFBVSxJQUFJLFdBQVcsRUFBRTt3QkFDcEMsSUFBSSxDQUFDLFNBQVMsQ0FBQyxVQUFVLENBQUMsYUFBYSxFQUFFLFVBQVUsQ0FBQyxDQUFDO3FCQUN0RDtvQkFDRCxJQUFJLENBQUMsV0FBVyxDQUFDLElBQUksQ0FBQyxFQUFFLFNBQVMsRUFBRSxLQUFLLEVBQUUsQ0FBQyxDQUFDO2dCQUM5QyxDQUFDOzs7O2dCQUNELEdBQUcsQ0FBQyxFQUFFLENBQUMsSUFBSSxDQUFDLGlCQUFpQixDQUFDLEtBQUssQ0FBQyxFQUNyQyxDQUFDO2FBQ0g7aUJBQU07Z0JBQ0wsSUFBSSxDQUFDLGlCQUFpQixDQUFDLEtBQUssQ0FBQyxDQUFDO2FBQy9CO1FBQ0gsQ0FBQztLQUFBOzs7OztJQUVELGlCQUFpQixDQUFDLEtBQUs7UUFDckIsS0FBSyxNQUFNLElBQUksSUFBSSxLQUFLLEVBQUU7O2tCQUNsQixNQUFNLEdBQUcsSUFBSSxVQUFVLEVBQUU7WUFDL0IsTUFBTSxDQUFDLGFBQWEsQ0FBQyxJQUFJLENBQUMsQ0FBQztZQUMzQixNQUFNLENBQUMsTUFBTTs7O1lBQUcsR0FBRyxFQUFFO2dCQUNuQixJQUFJLENBQUMsU0FBUyxDQUFDLFVBQVUsQ0FBQyxhQUFhLEVBQUUsTUFBTSxDQUFDLE1BQU0sQ0FBQyxDQUFDO2dCQUN4RCxJQUFJLENBQUMsV0FBVyxDQUFDLElBQUksQ0FBQyxFQUFFLFNBQVMsRUFBRSxLQUFLLEVBQUUsUUFBUSxFQUFFLFFBQVEsRUFBRSxDQUFDLENBQUM7WUFDbEUsQ0FBQyxDQUFBLENBQUM7WUFDRixNQUFNLENBQUMsT0FBTzs7OztZQUFHLEtBQUssQ0FBQyxFQUFFLENBQUMsT0FBTyxDQUFDLEtBQUssQ0FBQyxLQUFLLENBQUMsQ0FBQSxDQUFDO1NBQ2hEO0lBQ0gsQ0FBQzs7O1lBNVZGLFNBQVMsU0FBQzs7Z0JBRVQsUUFBUSxFQUFFLGlCQUFpQjtnQkFDM0IsU0FBUyxFQUFFO29CQUNUO3dCQUNFLE9BQU8sRUFBRSxpQkFBaUI7d0JBQzFCLFdBQVcsRUFBRSxVQUFVOzs7d0JBQUMsR0FBRyxFQUFFLENBQUMsc0JBQXNCLEVBQUM7d0JBQ3JELEtBQUssRUFBRSxJQUFJO3FCQUNaO2lCQUNGO2FBQ0Y7Ozs7WUE3QkMsVUFBVTtZQUlWLE1BQU07WUFQQyxVQUFVOzs7NEJBbUNoQixLQUFLOzhCQXFCTCxLQUFLO29DQUtMLE1BQU07MEJBQ04sTUFBTTswQkFDTixNQUFNO21CQUtOLE1BQU07b0NBRU4sS0FBSzs7OztJQVROLHVEQUE2RTs7SUFDN0UsNkNBQW1FOztJQUNuRSw2Q0FBbUU7O0lBS25FLHNDQUE0RDs7SUFFNUQsdURBQXdDOzs7OztJQUV4QywwQ0FBeUM7Ozs7O0lBRXpDLDhDQUFpRTs7Ozs7SUFDakUsaURBQXNDOzs7OztJQUN0QyxnREFBZ0M7Ozs7O0lBQ2hDLDJDQUF1Qjs7Ozs7SUFDdkIseUNBQXFCOzs7OztJQUNyQix3Q0FBdUI7Ozs7O0lBQ3ZCLDJDQUFpQzs7Ozs7SUFDakMsb0RBQW9DOzs7OztJQUVwQywyQ0FBZ0M7O0lBa0RoQywwQ0FBMEI7O0lBQzFCLDJDQUFxQjs7Ozs7SUFoRG5CLG9DQUFzQjs7Ozs7SUFDdEIsc0NBQW9COzs7OztJQUNwQixzQ0FBd0IiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBIdHRwQ2xpZW50IH0gZnJvbSAnQGFuZ3VsYXIvY29tbW9uL2h0dHAnO1xuaW1wb3J0IHtcbiAgRGlyZWN0aXZlLFxuICBFbGVtZW50UmVmLFxuICBFdmVudEVtaXR0ZXIsXG4gIGZvcndhcmRSZWYsXG4gIElucHV0LFxuICBOZ1pvbmUsXG4gIE9uQ2hhbmdlcyxcbiAgT25EZXN0cm95LFxuICBPbkluaXQsXG4gIE91dHB1dFxufSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IENvbnRyb2xWYWx1ZUFjY2Vzc29yLCBOR19WQUxVRV9BQ0NFU1NPUiB9IGZyb20gJ0Bhbmd1bGFyL2Zvcm1zJztcbmltcG9ydCB7IGNvbWJpbmVMYXRlc3QsIFN1YnNjcmlwdGlvbiB9IGZyb20gJ3J4anMnO1xuaW1wb3J0IHsgbWFwIH0gZnJvbSAncnhqcy9vcGVyYXRvcnMnO1xuXG5pbXBvcnQgeyBTdW1tZXJub3RlT3B0aW9ucyB9IGZyb20gJy4vc3VtbWVybm90ZS1vcHRpb25zJztcbmltcG9ydCB7IGNvZGVCbG9ja0J1dHRvbiB9IGZyb20gJy4vY29kZS1ibG9jay5idXR0b24nO1xuXG5kZWNsYXJlIHZhciAkO1xuXG5ARGlyZWN0aXZlKHtcbiAgLy8gdHNsaW50OmRpc2FibGUtbmV4dC1saW5lOmRpcmVjdGl2ZS1zZWxlY3RvclxuICBzZWxlY3RvcjogJ1tuZ3hTdW1tZXJub3RlXScsXG4gIHByb3ZpZGVyczogW1xuICAgIHtcbiAgICAgIHByb3ZpZGU6IE5HX1ZBTFVFX0FDQ0VTU09SLFxuICAgICAgdXNlRXhpc3Rpbmc6IGZvcndhcmRSZWYoKCkgPT4gTmd4U3VtbWVybm90ZURpcmVjdGl2ZSksXG4gICAgICBtdWx0aTogdHJ1ZVxuICAgIH1cbiAgXVxufSlcbmV4cG9ydCBjbGFzcyBOZ3hTdW1tZXJub3RlRGlyZWN0aXZlXG4gIGltcGxlbWVudHMgQ29udHJvbFZhbHVlQWNjZXNzb3IsIE9uSW5pdCwgT25EZXN0cm95LCBPbkNoYW5nZXMge1xuICBASW5wdXQoKSBzZXQgbmd4U3VtbWVybm90ZShvcHRpb25zOiBTdW1tZXJub3RlT3B0aW9ucykge1xuICAgIGlmIChvcHRpb25zKSB7XG4gICAgICBpZiAoIW9wdGlvbnMuYnV0dG9ucykge1xuICAgICAgICBvcHRpb25zLmJ1dHRvbnMgPSB7fTtcbiAgICAgIH1cblxuICAgICAgb3B0aW9ucy5jYWxsYmFja3MgPSB7XG4gICAgICAgIC4uLm9wdGlvbnMuY2FsbGJhY2tzLFxuICAgICAgICBvbkltYWdlVXBsb2FkOiBmaWxlcyA9PiB0aGlzLnVwbG9hZEltYWdlKGZpbGVzKSxcbiAgICAgICAgb25NZWRpYURlbGV0ZTogZmlsZXMgPT5cbiAgICAgICAgICB0aGlzLm1lZGlhRGVsZXRlLmVtaXQoeyB1cmw6ICQoZmlsZXNbMF0pLmF0dHIoJ3NyYycpIH0pXG4gICAgICB9O1xuXG4gICAgICAvLyBhZGQgY3VzdG9tIGJ1dHRvbnNcbiAgICAgIG9wdGlvbnMuYnV0dG9ucy5jb2RlQmxvY2sgPSBjb2RlQmxvY2tCdXR0b247XG5cbiAgICAgIE9iamVjdC5hc3NpZ24odGhpcy5fb3B0aW9ucywgb3B0aW9ucyk7XG4gICAgfVxuICB9XG5cbiAgLy8gc3VtbWVybm90ZU1vZGVsIGRpcmVjdGl2ZSBhcyBpbnB1dDogc3RvcmUgaW5pdGlhbCBlZGl0b3IgY29udGVudFxuICBASW5wdXQoKSBzZXQgc3VtbWVybm90ZU1vZGVsKGNvbnRlbnQ6IGFueSkge1xuICAgIHRoaXMudXBkYXRlRWRpdG9yKGNvbnRlbnQpO1xuICB9XG5cbiAgLy8gc3VtbWVybm90ZU1vZGVsIGRpcmVjdGl2ZSBhcyBvdXRwdXQ6IHVwZGF0ZSBtb2RlbCBpZiBlZGl0b3IgY29udGVudENoYW5nZWRcbiAgQE91dHB1dCgpIHN1bW1lcm5vdGVNb2RlbENoYW5nZTogRXZlbnRFbWl0dGVyPGFueT4gPSBuZXcgRXZlbnRFbWl0dGVyPGFueT4oKTtcbiAgQE91dHB1dCgpIGltYWdlVXBsb2FkOiBFdmVudEVtaXR0ZXI8YW55PiA9IG5ldyBFdmVudEVtaXR0ZXI8YW55PigpO1xuICBAT3V0cHV0KCkgbWVkaWFEZWxldGU6IEV2ZW50RW1pdHRlcjxhbnk+ID0gbmV3IEV2ZW50RW1pdHRlcjxhbnk+KCk7XG5cbiAgLy8gLy8gc3VtbWVybm90ZUluaXQgZGlyZWN0aXZlIGFzIG91dHB1dDogc2VuZCBtYW51YWwgZWRpdG9yIGluaXRpYWxpemF0aW9uXG4gIC8vIEBPdXRwdXQoKSBzdW1tZXJub3RlSW5pdDogRXZlbnRFbWl0dGVyPE9iamVjdD4gPSBuZXcgRXZlbnRFbWl0dGVyPE9iamVjdD4oKTtcblxuICBAT3V0cHV0KCkgYmx1cjogRXZlbnRFbWl0dGVyPGFueT4gPSBuZXcgRXZlbnRFbWl0dGVyPGFueT4oKTtcblxuICBASW5wdXQoKSBuZ3hTdW1tZXJub3RlRGlzYWJsZWQ6IGJvb2xlYW47XG5cbiAgcHJpdmF0ZSBfb3B0aW9uczogU3VtbWVybm90ZU9wdGlvbnMgPSB7fTtcblxuICBwcml2YXRlIFNQRUNJQUxfVEFHUzogc3RyaW5nW10gPSBbJ2ltZycsICdidXR0b24nLCAnaW5wdXQnLCAnYSddO1xuICBwcml2YXRlIElOTkVSX0hUTUxfQVRUUiA9ICdpbm5lckhUTUwnO1xuICBwcml2YXRlIF9oYXNTcGVjaWFsVGFnOiBib29sZWFuO1xuICBwcml2YXRlIF8kZWxlbWVudDogYW55OyAvLyBqcXVlcnkgd3JhcHBlZCBlbGVtZW50XG4gIHByaXZhdGUgX2VkaXRvcjogYW55OyAvLyBlZGl0b3IgZWxlbWVudFxuICBwcml2YXRlIF9tb2RlbDogc3RyaW5nO1xuICBwcml2YXRlIF9vbGRNb2RlbDogc3RyaW5nID0gbnVsbDtcbiAgcHJpdmF0ZSBfZWRpdG9ySW5pdGlhbGl6ZWQ6IGJvb2xlYW47XG5cbiAgcHJpdmF0ZSB1cGxvYWRTdWI6IFN1YnNjcmlwdGlvbjtcblxuICBjb25zdHJ1Y3RvcihcbiAgICBwcml2YXRlIGVsOiBFbGVtZW50UmVmLFxuICAgIHByaXZhdGUgem9uZTogTmdab25lLFxuICAgIHByaXZhdGUgaHR0cDogSHR0cENsaWVudFxuICApIHtcbiAgICBjb25zdCBlbGVtZW50OiBhbnkgPSBlbC5uYXRpdmVFbGVtZW50O1xuXG4gICAgLy8gY2hlY2sgaWYgdGhlIGVsZW1lbnQgaXMgYSBzcGVjaWFsIHRhZ1xuICAgIGlmICh0aGlzLlNQRUNJQUxfVEFHUy5pbmRleE9mKGVsZW1lbnQudGFnTmFtZS50b0xvd2VyQ2FzZSgpKSAhPT0gLTEpIHtcbiAgICAgIHRoaXMuX2hhc1NwZWNpYWxUYWcgPSB0cnVlO1xuICAgIH1cblxuICAgIC8vIGpxdWVyeSB3cmFwIGFuZCBzdG9yZSBlbGVtZW50XG5cbiAgICAvLyB0aGlzLl8kZWxlbWVudCA9IDxhbnk+JChlbGVtZW50KTtcblxuICAgIHRoaXMuem9uZSA9IHpvbmU7XG4gIH1cblxuICBuZ09uSW5pdCgpIHtcbiAgICB0aGlzLmNyZWF0ZUVkaXRvcigpO1xuICB9XG5cbiAgbmdPbkNoYW5nZXMoY2hhbmdlcykge1xuICAgIGlmICh0aGlzLl9lZGl0b3JJbml0aWFsaXplZCAmJiBjaGFuZ2VzKSB7XG4gICAgICBpZiAoXG4gICAgICAgIGNoYW5nZXMubmd4U3VtbWVybm90ZURpc2FibGVkICYmXG4gICAgICAgICFjaGFuZ2VzLm5neFN1bW1lcm5vdGVEaXNhYmxlZC5maXJzdENoYW5nZSAmJlxuICAgICAgICBjaGFuZ2VzLm5neFN1bW1lcm5vdGVEaXNhYmxlZC5jdXJyZW50VmFsdWUgIT09XG4gICAgICAgICAgY2hhbmdlcy5uZ3hTdW1tZXJub3RlRGlzYWJsZWQucHJldmlvdXNWYWx1ZVxuICAgICAgKSB7XG4gICAgICAgIGlmIChjaGFuZ2VzLm5neFN1bW1lcm5vdGVEaXNhYmxlZC5jdXJyZW50VmFsdWUpIHtcbiAgICAgICAgICB0aGlzLl8kZWxlbWVudC5zdW1tZXJub3RlKCdkaXNhYmxlJyk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgdGhpcy5fJGVsZW1lbnQuc3VtbWVybm90ZSgnZW5hYmxlJyk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICBuZ09uRGVzdHJveSgpIHtcbiAgICB0aGlzLmRlc3Ryb3lFZGl0b3IoKTtcbiAgICBpZiAodGhpcy51cGxvYWRTdWIpIHtcbiAgICAgIHRoaXMudXBsb2FkU3ViLnVuc3Vic2NyaWJlKCk7XG4gICAgfVxuICB9XG5cbiAgLy8gQmVnaW4gQ29udHJvbFZhbHVlQWNjZXNvciBtZXRob2RzLlxuICBvbkNoYW5nZSA9IChfOiBhbnkpID0+IHt9O1xuICBvblRvdWNoZWQgPSAoKSA9PiB7fTtcblxuICAvLyBGb3JtIG1vZGVsIGNvbnRlbnQgY2hhbmdlZC5cbiAgd3JpdGVWYWx1ZShjb250ZW50OiBhbnkpOiB2b2lkIHtcbiAgICB0aGlzLnVwZGF0ZUVkaXRvcihjb250ZW50KTtcbiAgfVxuXG4gIHJlZ2lzdGVyT25DaGFuZ2UoZm46IChfOiBhbnkpID0+IHZvaWQpOiB2b2lkIHtcbiAgICB0aGlzLm9uQ2hhbmdlID0gZm47XG4gIH1cbiAgcmVnaXN0ZXJPblRvdWNoZWQoZm46ICgpID0+IHZvaWQpOiB2b2lkIHtcbiAgICB0aGlzLm9uVG91Y2hlZCA9IGZuO1xuICB9XG5cbiAgLy8gVXBkYXRlIGVkaXRvciB3aXRoIG1vZGVsIGNvbnRlbnRzLlxuICBwcml2YXRlIHVwZGF0ZUVkaXRvcihjb250ZW50OiBhbnkpIHtcbiAgICBpZiAoSlNPTi5zdHJpbmdpZnkodGhpcy5fb2xkTW9kZWwpID09PSBKU09OLnN0cmluZ2lmeShjb250ZW50KSkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIHRoaXMuX29sZE1vZGVsID0gY29udGVudDtcbiAgICAvLyB0aGlzLl8kZWxlbWVudC5odG1sKGNvbnRlbnQpO1xuXG4gICAgaWYgKHRoaXMuX2VkaXRvckluaXRpYWxpemVkKSB7XG4gICAgICB0aGlzLl8kZWxlbWVudC5zdW1tZXJub3RlKCdjb2RlJywgY29udGVudCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXMuXyRlbGVtZW50Lmh0bWwoY29udGVudCk7XG4gICAgfVxuICB9XG5cbiAgLy8gdXBkYXRlIG1vZGVsIGlmIGVkaXRvciBjb250ZW50Q2hhbmdlZFxuICBwcml2YXRlIHVwZGF0ZU1vZGVsKGNvbnRlbnQ/OiBhbnkpIHtcbiAgICAvLyBjb25zb2xlLmxvZygndXBkYXRlIG1vZGVsJywgY29udGVudClcbiAgICB0aGlzLnpvbmUucnVuKCgpID0+IHtcbiAgICAgIGxldCBtb2RlbENvbnRlbnQ6IGFueSA9IG51bGw7XG5cbiAgICAgIGlmICh0aGlzLl9oYXNTcGVjaWFsVGFnKSB7XG4gICAgICAgIGNvbnN0IGF0dHJpYnV0ZU5vZGVzID0gdGhpcy5fJGVsZW1lbnRbMF0uYXR0cmlidXRlcztcbiAgICAgICAgY29uc3QgYXR0cnMgPSB7fTtcblxuICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IGF0dHJpYnV0ZU5vZGVzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgY29uc3QgYXR0ck5hbWUgPSBhdHRyaWJ1dGVOb2Rlc1tpXS5uYW1lO1xuICAgICAgICAgIGlmIChcbiAgICAgICAgICAgIHRoaXMuX29wdGlvbnMuYW5ndWxhcklnbm9yZUF0dHJzICYmXG4gICAgICAgICAgICB0aGlzLl9vcHRpb25zLmFuZ3VsYXJJZ25vcmVBdHRycy5pbmRleE9mKGF0dHJOYW1lKSAhPT0gLTFcbiAgICAgICAgICApIHtcbiAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICAgIH1cbiAgICAgICAgICBhdHRyc1thdHRyTmFtZV0gPSBhdHRyaWJ1dGVOb2Rlc1tpXS52YWx1ZTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmICh0aGlzLl8kZWxlbWVudFswXS5pbm5lckhUTUwpIHtcbiAgICAgICAgICBhdHRyc1t0aGlzLklOTkVSX0hUTUxfQVRUUl0gPSB0aGlzLl8kZWxlbWVudFswXS5pbm5lckhUTUw7XG4gICAgICAgIH1cblxuICAgICAgICBtb2RlbENvbnRlbnQgPSBhdHRycztcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGNvbnN0IHJldHVybmVkSHRtbDogYW55ID0gY29udGVudCB8fCAnJztcbiAgICAgICAgaWYgKHR5cGVvZiByZXR1cm5lZEh0bWwgPT09ICdzdHJpbmcnKSB7XG4gICAgICAgICAgbW9kZWxDb250ZW50ID0gcmV0dXJuZWRIdG1sO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICBpZiAodGhpcy5fb2xkTW9kZWwgIT09IG1vZGVsQ29udGVudCkge1xuICAgICAgICB0aGlzLl9vbGRNb2RlbCA9IG1vZGVsQ29udGVudDtcbiAgICAgICAgLy8gVXBkYXRlIHN1bW1lcm5vdGVNb2RlbFxuICAgICAgICB0aGlzLnN1bW1lcm5vdGVNb2RlbENoYW5nZS5lbWl0KG1vZGVsQ29udGVudCk7XG4gICAgICAgIC8vIFVwZGF0ZSBmb3JtIG1vZGVsLlxuICAgICAgICB0aGlzLm9uQ2hhbmdlKGNvbnRlbnQpO1xuICAgICAgfVxuICAgIH0pO1xuICB9XG5cbiAgcHJpdmF0ZSBpbml0TGlzdGVuZXJzKCkge1xuICAgIGNvbnN0IHNlbGYgPSB0aGlzO1xuXG4gICAgaWYgKCF0aGlzLl8kZWxlbWVudCkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIHRoaXMuXyRlbGVtZW50Lm9uKCdzdW1tZXJub3RlLmluaXQnLCBmdW5jdGlvbigpIHtcbiAgICAgIHNldFRpbWVvdXQoZnVuY3Rpb24oKSB7XG4gICAgICAgIHNlbGYudXBkYXRlTW9kZWwoKTtcbiAgICAgIH0sIDApO1xuICAgIH0pO1xuXG4gICAgdGhpcy5fJGVsZW1lbnQub24oJ3N1bW1lcm5vdGUuY2hhbmdlJywgZnVuY3Rpb24oXG4gICAgICBldmVudCxcbiAgICAgIGNvbnRlbnRzLFxuICAgICAgJGVkaXRhYmxlXG4gICAgKSB7XG4gICAgICBzZXRUaW1lb3V0KGZ1bmN0aW9uKCkge1xuICAgICAgICBzZWxmLnVwZGF0ZU1vZGVsKGNvbnRlbnRzKTtcbiAgICAgIH0sIDApO1xuICAgIH0pO1xuXG4gICAgdGhpcy5fJGVsZW1lbnQub24oJ3N1bW1lcm5vdGUuYmx1cicsIGZ1bmN0aW9uKCkge1xuICAgICAgc2V0VGltZW91dChmdW5jdGlvbigpIHtcbiAgICAgICAgc2VsZi5vblRvdWNoZWQoKTtcbiAgICAgICAgc2VsZi5ibHVyLmVtaXQoKTtcbiAgICAgIH0sIDApO1xuICAgIH0pO1xuXG4gICAgaWYgKHRoaXMuX29wdGlvbnMuaW1tZWRpYXRlQW5ndWxhck1vZGVsVXBkYXRlKSB7XG4gICAgICB0aGlzLl9lZGl0b3Iub24oJ2tleXVwJywgZnVuY3Rpb24oKSB7XG4gICAgICAgIHNldFRpbWVvdXQoZnVuY3Rpb24oKSB7XG4gICAgICAgICAgc2VsZi51cGRhdGVNb2RlbCgpO1xuICAgICAgICB9LCAwKTtcbiAgICAgIH0pO1xuICAgIH1cbiAgfVxuXG4gIHByaXZhdGUgY3JlYXRlRWRpdG9yKCkge1xuICAgIGlmICh0aGlzLl9lZGl0b3JJbml0aWFsaXplZCkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIHRoaXMuc2V0Q29udGVudCh0cnVlKTtcblxuICAgIGNvbnN0IHdhaXQgPSA1MDtcbiAgICAvLyB0aGlzLmluaXRMaXN0ZW5lcnMoKTsgLy8gaXNzdWUgIzMxXG4gICAgdHJ5IHtcbiAgICAgIHRoaXMuXyRlbGVtZW50ID0gPGFueT4kKHRoaXMuZWwubmF0aXZlRWxlbWVudCk7XG4gICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgIGNvbnNvbGUubG9nKGBKUXVlcnkgc2VlbXMgbm90IHRlIGxvYWRlZCB5ZXQhIFdhaXQgJHt3YWl0fW1zIGFuZCB0cnkgYWdhaW5gKTtcbiAgICB9XG5cbiAgICBpZiAoIXRoaXMuXyRlbGVtZW50KSB7XG4gICAgICBzZXRUaW1lb3V0KCgpID0+IHtcbiAgICAgICAgdGhpcy5jcmVhdGVFZGl0b3IoKTtcbiAgICAgIH0sIHdhaXQpO1xuICAgIH0gZWxzZSB7XG4gICAgICAvLyBpbml0IGVkaXRvclxuICAgICAgdGhpcy56b25lLnJ1bk91dHNpZGVBbmd1bGFyKCgpID0+IHtcbiAgICAgICAgdGhpcy5fZWRpdG9yID0gdGhpcy5fJGVsZW1lbnRcbiAgICAgICAgICAuc3VtbWVybm90ZSh0aGlzLl9vcHRpb25zKVxuICAgICAgICAgIC5kYXRhKCdzdW1tZXJub3RlJykuJG5vdGU7XG5cbiAgICAgICAgdGhpcy5pbml0TGlzdGVuZXJzKCk7IC8vIGlzc3VlICMzMVxuXG4gICAgICAgIGlmICh0aGlzLm5neFN1bW1lcm5vdGVEaXNhYmxlZCkge1xuICAgICAgICAgIHRoaXMuXyRlbGVtZW50LnN1bW1lcm5vdGUoJ2Rpc2FibGUnKTtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgICB0aGlzLl9lZGl0b3JJbml0aWFsaXplZCA9IHRydWU7XG4gICAgfVxuICB9XG5cbiAgcHJpdmF0ZSBzZXRIdG1sKCkge1xuICAgIHRoaXMuXyRlbGVtZW50LnN1bW1lcm5vdGUoJ2NvZGUnLCB0aGlzLl9tb2RlbCB8fCAnJywgdHJ1ZSk7XG4gIH1cblxuICBwcml2YXRlIHNldENvbnRlbnQoZmlyc3RUaW1lID0gZmFsc2UpIHtcbiAgICAvLyBjb25zb2xlLmxvZygnc2V0IGNvbnRlbnQnLCBmaXJzdFRpbWUsIHRoaXMuX29sZE1vZGVsLCB0aGlzLl9tb2RlbClcbiAgICBjb25zdCBzZWxmID0gdGhpcztcbiAgICAvLyBTZXQgaW5pdGlhbCBjb250ZW50XG4gICAgaWYgKHRoaXMuX21vZGVsIHx8IHRoaXMuX21vZGVsID09PSAnJykge1xuICAgICAgdGhpcy5fb2xkTW9kZWwgPSB0aGlzLl9tb2RlbDtcbiAgICAgIGlmICh0aGlzLl9oYXNTcGVjaWFsVGFnKSB7XG4gICAgICAgIGNvbnN0IHRhZ3M6IE9iamVjdCA9IHRoaXMuX21vZGVsO1xuICAgICAgICAvLyBhZGQgdGFncyBvbiBlbGVtZW50XG4gICAgICAgIGlmICh0YWdzKSB7XG4gICAgICAgICAgZm9yIChjb25zdCBhdHRyIGluIHRhZ3MpIHtcbiAgICAgICAgICAgIGlmICh0YWdzLmhhc093blByb3BlcnR5KGF0dHIpICYmIGF0dHIgIT09IHRoaXMuSU5ORVJfSFRNTF9BVFRSKSB7XG4gICAgICAgICAgICAgIHRoaXMuXyRlbGVtZW50LmF0dHIoYXR0ciwgdGFnc1thdHRyXSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgaWYgKHRhZ3MuaGFzT3duUHJvcGVydHkodGhpcy5JTk5FUl9IVE1MX0FUVFIpKSB7XG4gICAgICAgICAgICB0aGlzLl8kZWxlbWVudFswXS5pbm5lckhUTUwgPSB0YWdzW3RoaXMuSU5ORVJfSFRNTF9BVFRSXTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHNlbGYuc2V0SHRtbCgpO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIHByaXZhdGUgZGVzdHJveUVkaXRvcigpIHtcbiAgICBpZiAodGhpcy5fZWRpdG9ySW5pdGlhbGl6ZWQpIHtcbiAgICAgIHRoaXMuX2VkaXRvci5vZmYoJ2tleXVwJyk7XG4gICAgICB0aGlzLl8kZWxlbWVudC5zdW1tZXJub3RlKCdkZXN0cm95Jyk7IC8vIFRPRE8gbm90IHN1cmUgaXQgd29ya3Mgbm93Li4uXG4gICAgICB0aGlzLl9lZGl0b3JJbml0aWFsaXplZCA9IGZhbHNlO1xuICAgIH1cbiAgfVxuXG4gIC8vIHByaXZhdGUgZ2V0RWRpdG9yKCkge1xuICAvLyAgIGlmICh0aGlzLl8kZWxlbWVudCkge1xuICAvLyAgICAgcmV0dXJuIHRoaXMuXyRlbGVtZW50LnN1bW1lcm5vdGUuYmluZCh0aGlzLl8kZWxlbWVudCk7XG4gIC8vICAgfVxuXG4gIC8vICAgcmV0dXJuIG51bGw7XG4gIC8vIH1cblxuICBwcml2YXRlIGFzeW5jIHVwbG9hZEltYWdlKGZpbGVzKSB7XG4gICAgaWYgKHRoaXMuX29wdGlvbnMudXBsb2FkSW1hZ2VQYXRoKSB7XG4gICAgICB0aGlzLmltYWdlVXBsb2FkLmVtaXQoeyB1cGxvYWRpbmc6IHRydWUgfSk7XG5cbiAgICAgIGNvbnN0IHJlcXVlc3RzID0gW107XG4gICAgICBmb3IgKGNvbnN0IGZpbGUgb2YgZmlsZXMpIHtcbiAgICAgICAgY29uc3QgZGF0YSA9IG5ldyBGb3JtRGF0YSgpO1xuICAgICAgICBkYXRhLmFwcGVuZCgnaW1hZ2UnLCBmaWxlKTtcbiAgICAgICAgY29uc3Qgb2JzID0gdGhpcy5odHRwXG4gICAgICAgICAgLnBvc3QodGhpcy5fb3B0aW9ucy51cGxvYWRJbWFnZVBhdGgsIGRhdGEsIHRoaXMuX29wdGlvbnMudXBsb2FkSW1hZ2VSZXF1ZXN0T3B0aW9ucylcbiAgICAgICAgICAucGlwZShcbiAgICAgICAgICAgIG1hcChcbiAgICAgICAgICAgICAgKHJlc3BvbnNlOiB7IHBhdGg6IHN0cmluZyB9KSA9PlxuICAgICAgICAgICAgICAgIHJlc3BvbnNlICYmIHR5cGVvZiByZXNwb25zZS5wYXRoID09PSAnc3RyaW5nJyAmJiByZXNwb25zZS5wYXRoXG4gICAgICAgICAgICApXG4gICAgICAgICAgKTtcbiAgICAgICAgcmVxdWVzdHMucHVzaChvYnMpO1xuICAgICAgfVxuXG4gICAgICB0aGlzLnVwbG9hZFN1YiA9IGNvbWJpbmVMYXRlc3QocmVxdWVzdHMpLnN1YnNjcmliZShcbiAgICAgICAgKHJlbW90ZVBhdGhzOiBzdHJpbmdbXSkgPT4ge1xuICAgICAgICAgIGZvciAoY29uc3QgcmVtb3RlUGF0aCBvZiByZW1vdGVQYXRocykge1xuICAgICAgICAgICAgdGhpcy5fJGVsZW1lbnQuc3VtbWVybm90ZSgnaW5zZXJ0SW1hZ2UnLCByZW1vdGVQYXRoKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgdGhpcy5pbWFnZVVwbG9hZC5lbWl0KHsgdXBsb2FkaW5nOiBmYWxzZSB9KTtcbiAgICAgICAgfSxcbiAgICAgICAgZXJyID0+IHRoaXMuaW5zZXJ0RnJvbURhdGFVUkwoZmlsZXMpXG4gICAgICApO1xuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzLmluc2VydEZyb21EYXRhVVJMKGZpbGVzKTtcbiAgICB9XG4gIH1cblxuICBpbnNlcnRGcm9tRGF0YVVSTChmaWxlcykge1xuICAgIGZvciAoY29uc3QgZmlsZSBvZiBmaWxlcykge1xuICAgICAgY29uc3QgcmVhZGVyID0gbmV3IEZpbGVSZWFkZXIoKTtcbiAgICAgIHJlYWRlci5yZWFkQXNEYXRhVVJMKGZpbGUpO1xuICAgICAgcmVhZGVyLm9ubG9hZCA9ICgpID0+IHtcbiAgICAgICAgdGhpcy5fJGVsZW1lbnQuc3VtbWVybm90ZSgnaW5zZXJ0SW1hZ2UnLCByZWFkZXIucmVzdWx0KTtcbiAgICAgICAgdGhpcy5pbWFnZVVwbG9hZC5lbWl0KHsgdXBsb2FkaW5nOiBmYWxzZSwgZW5jb2Rpbmc6ICdiYXNlNjQnIH0pO1xuICAgICAgfTtcbiAgICAgIHJlYWRlci5vbmVycm9yID0gZXJyb3IgPT4gY29uc29sZS5lcnJvcihlcnJvcik7XG4gICAgfVxuICB9XG59XG4iXX0=