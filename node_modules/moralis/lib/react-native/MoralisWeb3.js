var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = exports.EthereumEvents = void 0;

var _slicedToArray2 = _interopRequireDefault(require("@babel/runtime/helpers/slicedToArray"));

var _regenerator = _interopRequireDefault(require("@babel/runtime/regenerator"));

var _construct2 = _interopRequireDefault(require("@babel/runtime/helpers/construct"));

var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));

var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));

var _web = _interopRequireDefault(require("web3"));

var _ParseObject = _interopRequireDefault(require("./ParseObject"));

var _ParseQuery = _interopRequireDefault(require("./ParseQuery"));

var _ParseUser = _interopRequireDefault(require("./ParseUser"));

var _ParseACL = _interopRequireDefault(require("./ParseACL"));

var _MoralisErd = _interopRequireDefault(require("./MoralisErd"));

var _MoralisDot = _interopRequireDefault(require("./MoralisDot"));

var _MoralisWalletConnectProvider = _interopRequireDefault(require("./MoralisWalletConnectProvider"));

var _MoralisInjectedProvider = _interopRequireDefault(require("./MoralisInjectedProvider"));

var _TransferUtils = _interopRequireDefault(require("./TransferUtils"));

var _Cloud = require("./Cloud");

var EthereumEvents = {
  CONNECT: 'connect',
  DISCONNECT: 'disconnect',
  ACCOUNTS_CHANGED: 'accountsChanged',
  CHAIN_CHANGED: 'chainChanged'
};
exports.EthereumEvents = EthereumEvents;
var WARNING = 'Non ethereum enabled browser';

function uniq(arr) {
  return arr.filter(function (v, i) {
    return arr.indexOf(v) === i;
  });
}

var MoralisWeb3 = function () {
  function MoralisWeb3() {
    (0, _classCallCheck2.default)(this, MoralisWeb3);
    var MWeb3 = typeof _web.default === 'function' ? _web.default : window.Web3;

    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    return (0, _construct2.default)(MWeb3, args);
  }

  (0, _createClass2.default)(MoralisWeb3, null, [{
    key: "enable",
    value: function (options) {
      var Web3Provider, web3Provider, web3;
      return _regenerator.default.async(function (_context) {
        while (1) {
          switch (_context.prev = _context.next) {
            case 0:
              Web3Provider = MoralisWeb3.getWeb3Provider(options);
              web3Provider = new Web3Provider();
              _context.next = 4;
              return _regenerator.default.awrap(web3Provider.activate(options));

            case 4:
              web3 = _context.sent;
              this.activeWeb3Provider = web3Provider;
              this.web3 = web3;
              return _context.abrupt("return", web3);

            case 8:
            case "end":
              return _context.stop();
          }
        }
      }, null, this, null, Promise);
    }
  }, {
    key: "isDotAuth",
    value: function (options) {
      switch (options == null ? void 0 : options.type) {
        case 'dot':
        case 'polkadot':
        case 'kusama':
          return true;

        default:
          return false;
      }
    }
  }, {
    key: "isElrondAuth",
    value: function (options) {
      switch (options == null ? void 0 : options.type) {
        case 'erd':
        case 'elrond':
          return true;

        default:
          return false;
      }
    }
  }, {
    key: "getWeb3Provider",
    value: function (options) {
      switch (options == null ? void 0 : options.provider) {
        case 'walletconnect':
        case 'walletConnect':
        case 'wc':
          return _MoralisWalletConnectProvider.default;

        default:
          return _MoralisInjectedProvider.default;
      }
    }
  }, {
    key: "cleanup",
    value: function () {
      return _regenerator.default.async(function (_context2) {
        while (1) {
          switch (_context2.prev = _context2.next) {
            case 0:
              if (!this.activeWeb3Provider) {
                _context2.next = 3;
                break;
              }

              _context2.next = 3;
              return _regenerator.default.awrap(this.activeWeb3Provider.deactivate());

            case 3:
              _MoralisWalletConnectProvider.default.cleanupStaleData();

            case 4:
            case "end":
              return _context2.stop();
          }
        }
      }, null, this, null, Promise);
    }
  }, {
    key: "authenticate",
    value: function (options) {
      var _user$get;

      var isLoggedIn, web3, data, accounts, accountsLower, _accountsLower, ethAddress, signature, authData, user;

      return _regenerator.default.async(function (_context3) {
        while (1) {
          switch (_context3.prev = _context3.next) {
            case 0:
              _context3.next = 2;
              return _regenerator.default.awrap(_ParseUser.default.current());

            case 2:
              isLoggedIn = _context3.sent;

              if (!isLoggedIn) {
                _context3.next = 6;
                break;
              }

              _context3.next = 6;
              return _regenerator.default.awrap(_ParseUser.default.logOut());

            case 6:
              _context3.next = 8;
              return _regenerator.default.awrap(MoralisWeb3.cleanup());

            case 8:
              if (!MoralisWeb3.isDotAuth(options)) {
                _context3.next = 10;
                break;
              }

              return _context3.abrupt("return", _MoralisDot.default.authenticate(options));

            case 10:
              if (!MoralisWeb3.isElrondAuth(options)) {
                _context3.next = 12;
                break;
              }

              return _context3.abrupt("return", _MoralisErd.default.authenticate(options));

            case 12:
              _context3.next = 14;
              return _regenerator.default.awrap(MoralisWeb3.enable(options));

            case 14:
              web3 = _context3.sent;
              data = (options == null ? void 0 : options.signingMessage) || MoralisWeb3.getSigningData();
              _context3.next = 18;
              return _regenerator.default.awrap(web3.eth.getAccounts());

            case 18:
              accounts = _context3.sent;
              accountsLower = accounts.map(function (v) {
                return v.toLowerCase();
              });
              _accountsLower = (0, _slicedToArray2.default)(accountsLower, 1), ethAddress = _accountsLower[0];

              if (ethAddress) {
                _context3.next = 23;
                break;
              }

              throw new Error('Address not found');

            case 23:
              _context3.next = 25;
              return _regenerator.default.awrap(web3.eth.personal.sign(data, ethAddress, ''));

            case 25:
              signature = _context3.sent;

              if (signature) {
                _context3.next = 28;
                break;
              }

              throw new Error('Data not signed');

            case 28:
              authData = {
                id: ethAddress,
                signature: signature,
                data: data
              };
              _context3.next = 31;
              return _regenerator.default.awrap(_ParseUser.default.logInWith('moralisEth', {
                authData: authData
              }));

            case 31:
              user = _context3.sent;
              _context3.next = 34;
              return _regenerator.default.awrap(user.setACL(new _ParseACL.default(user)));

            case 34:
              if (user) {
                _context3.next = 36;
                break;
              }

              throw new Error('Could not get user');

            case 36:
              user.set('accounts', uniq([].concat(accountsLower, (_user$get = user.get('accounts')) != null ? _user$get : [])));
              user.set('ethAddress', ethAddress);
              _context3.next = 40;
              return _regenerator.default.awrap(user.save(null, options));

            case 40:
              return _context3.abrupt("return", user);

            case 41:
            case "end":
              return _context3.stop();
          }
        }
      }, null, null, null, Promise);
    }
  }, {
    key: "link",
    value: function (account, options) {
      var _user$get2;

      var web3, data, user, ethAddress, EthAddress, query, ethAddressRecord, signature, authData;
      return _regenerator.default.async(function (_context4) {
        while (1) {
          switch (_context4.prev = _context4.next) {
            case 0:
              _context4.next = 2;
              return _regenerator.default.awrap(MoralisWeb3.enable(options));

            case 2:
              web3 = _context4.sent;
              data = MoralisWeb3.getSigningData();
              _context4.next = 6;
              return _regenerator.default.awrap(_ParseUser.default.current());

            case 6:
              user = _context4.sent;
              ethAddress = account.toLowerCase();
              EthAddress = _ParseObject.default.extend('_EthAddress');
              query = new _ParseQuery.default(EthAddress);
              _context4.next = 12;
              return _regenerator.default.awrap(query.get(ethAddress).catch(function () {
                return null;
              }));

            case 12:
              ethAddressRecord = _context4.sent;

              if (ethAddressRecord) {
                _context4.next = 20;
                break;
              }

              _context4.next = 16;
              return _regenerator.default.awrap(web3.eth.personal.sign(data, account, ''));

            case 16:
              signature = _context4.sent;
              authData = {
                id: ethAddress,
                signature: signature,
                data: data
              };
              _context4.next = 20;
              return _regenerator.default.awrap(user.linkWith('moralisEth', {
                authData: authData
              }));

            case 20:
              user.set('accounts', uniq([ethAddress].concat((_user$get2 = user.get('accounts')) != null ? _user$get2 : [])));
              user.set('ethAddress', ethAddress);
              _context4.next = 24;
              return _regenerator.default.awrap(user.save(null, options));

            case 24:
              return _context4.abrupt("return", user);

            case 25:
            case "end":
              return _context4.stop();
          }
        }
      }, null, null, null, Promise);
    }
  }, {
    key: "unlink",
    value: function (account) {
      var _user$get3;

      var accountsLower, EthAddress, query, ethAddressRecord, user, accounts, nextAccounts;
      return _regenerator.default.async(function (_context5) {
        while (1) {
          switch (_context5.prev = _context5.next) {
            case 0:
              accountsLower = account.toLowerCase();
              EthAddress = _ParseObject.default.extend('_EthAddress');
              query = new _ParseQuery.default(EthAddress);
              _context5.next = 5;
              return _regenerator.default.awrap(query.get(accountsLower));

            case 5:
              ethAddressRecord = _context5.sent;
              _context5.next = 8;
              return _regenerator.default.awrap(ethAddressRecord.destroy());

            case 8:
              _context5.next = 10;
              return _regenerator.default.awrap(_ParseUser.default.current());

            case 10:
              user = _context5.sent;
              accounts = (_user$get3 = user.get('accounts')) != null ? _user$get3 : [];
              nextAccounts = accounts.filter(function (v) {
                return v !== accountsLower;
              });
              user.set('accounts', nextAccounts);
              user.set('ethAddress', nextAccounts[0]);
              _context5.next = 17;
              return _regenerator.default.awrap(user._unlinkFrom('moralisEth'));

            case 17:
              _context5.next = 19;
              return _regenerator.default.awrap(user.save());

            case 19:
              return _context5.abrupt("return", user);

            case 20:
            case "end":
              return _context5.stop();
          }
        }
      }, null, null, null, Promise);
    }
  }, {
    key: "initPlugins",
    value: function (installedPlugins) {
      var _this = this;

      var specs, allPlugins;
      return _regenerator.default.async(function (_context7) {
        while (1) {
          switch (_context7.prev = _context7.next) {
            case 0:
              _context7.t0 = installedPlugins;

              if (_context7.t0) {
                _context7.next = 5;
                break;
              }

              _context7.next = 4;
              return _regenerator.default.awrap((0, _Cloud.run)('getPluginSpecs'));

            case 4:
              _context7.t0 = _context7.sent;

            case 5:
              specs = _context7.t0;
              if (!this.Plugins) this.Plugins = {};

              if (specs) {
                _context7.next = 9;
                break;
              }

              return _context7.abrupt("return");

            case 9:
              allPlugins = this.Plugins;
              specs.forEach(function (plugin) {
                allPlugins[plugin.name] = {};
                plugin.functions.forEach(function (f) {
                  allPlugins[plugin.name][f] = function (params, options) {
                    var response, triggerReturn;
                    return _regenerator.default.async(function (_context6) {
                      while (1) {
                        switch (_context6.prev = _context6.next) {
                          case 0:
                            if (!options) options = {};
                            _context6.next = 3;
                            return _regenerator.default.awrap((0, _Cloud.run)(plugin.name + "_" + f, params));

                          case 3:
                            response = _context6.sent;

                            if (response.data.success) {
                              _context6.next = 6;
                              break;
                            }

                            throw new Error('Something went wrong', response.data);

                          case 6:
                            if (!(options.disableTriggers !== true)) {
                              _context6.next = 12;
                              break;
                            }

                            _context6.next = 9;
                            return _regenerator.default.awrap(_this.handleTriggers(response.data.result.triggers));

                          case 9:
                            triggerReturn = _context6.sent;

                            if (!triggerReturn) {
                              _context6.next = 12;
                              break;
                            }

                            return _context6.abrupt("return", triggerReturn);

                          case 12:
                            return _context6.abrupt("return", response.data.result);

                          case 13:
                          case "end":
                            return _context6.stop();
                        }
                      }
                    }, null, null, null, Promise);
                  };
                });
              });
              this.Plugins = allPlugins;

            case 12:
            case "end":
              return _context7.stop();
          }
        }
      }, null, this, null, Promise);
    }
  }, {
    key: "handleTriggers",
    value: function (_triggersArray) {
      var _triggersArray$i, _triggersArray$i2, _triggersArray$i2$opt, _triggersArray$i3, _triggersArray$i3$opt, _triggersArray$i4, _triggersArray$i5, _triggersArray$i5$opt, _triggersArray$i6, _triggersArray$i7, _triggersArray$i8, _triggersArray$i9, _triggersArray$i10, _triggersArray$i11, _triggersArray$i12;

      var i, response;
      return _regenerator.default.async(function (_context8) {
        while (1) {
          switch (_context8.prev = _context8.next) {
            case 0:
              if (_triggersArray) {
                _context8.next = 2;
                break;
              }

              return _context8.abrupt("return");

            case 2:
              i = 0;

            case 3:
              if (!(i < _triggersArray.length)) {
                _context8.next = 24;
                break;
              }

              response = void 0;
              _context8.t0 = (_triggersArray$i = _triggersArray[i]) == null ? void 0 : _triggersArray$i.name;
              _context8.next = _context8.t0 === 'openUrl' ? 8 : _context8.t0 === 'web3Transaction' ? 13 : 21;
              break;

            case 8:
              if (((_triggersArray$i2 = _triggersArray[i]) == null ? void 0 : (_triggersArray$i2$opt = _triggersArray$i2.options) == null ? void 0 : _triggersArray$i2$opt.newTab) === true || !((_triggersArray$i3 = _triggersArray[i]) != null && (_triggersArray$i3$opt = _triggersArray$i3.options) != null && _triggersArray$i3$opt.hasOwnProperty('newTab'))) response = window.open((_triggersArray$i4 = _triggersArray[i]) == null ? void 0 : _triggersArray$i4.data);
              if (((_triggersArray$i5 = _triggersArray[i]) == null ? void 0 : (_triggersArray$i5$opt = _triggersArray$i5.options) == null ? void 0 : _triggersArray$i5$opt.newTab) === false) response = window.open((_triggersArray$i6 = _triggersArray[i]) == null ? void 0 : _triggersArray$i6.data, '_self');

              if (!(((_triggersArray$i7 = _triggersArray[i]) == null ? void 0 : _triggersArray$i7.shouldReturnResponse) === true)) {
                _context8.next = 12;
                break;
              }

              return _context8.abrupt("return", response);

            case 12:
              return _context8.abrupt("break", 21);

            case 13:
              if (!(((_triggersArray$i8 = _triggersArray[i]) == null ? void 0 : _triggersArray$i8.shouldAwait) === true)) {
                _context8.next = 17;
                break;
              }

              _context8.next = 16;
              return _regenerator.default.awrap(this.web3.eth.sendTransaction((_triggersArray$i9 = _triggersArray[i]) == null ? void 0 : _triggersArray$i9.data));

            case 16:
              response = _context8.sent;

            case 17:
              if (((_triggersArray$i10 = _triggersArray[i]) == null ? void 0 : _triggersArray$i10.shouldAwait) === false) response = this.web3.eth.sendTransaction((_triggersArray$i11 = _triggersArray[i]) == null ? void 0 : _triggersArray$i11.data);

              if (!(((_triggersArray$i12 = _triggersArray[i]) == null ? void 0 : _triggersArray$i12.shouldReturnResponse) === true)) {
                _context8.next = 20;
                break;
              }

              return _context8.abrupt("return", response);

            case 20:
              return _context8.abrupt("break", 21);

            case 21:
              i++;
              _context8.next = 3;
              break;

            case 24:
            case "end":
              return _context8.stop();
          }
        }
      }, null, this, null, Promise);
    }
  }, {
    key: "getAllERC20",
    value: function () {
      var _ref,
          chain,
          address,
          result,
          _args9 = arguments;

      return _regenerator.default.async(function (_context9) {
        while (1) {
          switch (_context9.prev = _context9.next) {
            case 0:
              _ref = _args9.length > 0 && _args9[0] !== undefined ? _args9[0] : {}, chain = _ref.chain, address = _ref.address;
              _context9.next = 3;
              return _regenerator.default.awrap((0, _Cloud.run)('getAllERC20', {
                chain: chain,
                address: address
              }));

            case 3:
              result = _context9.sent;
              return _context9.abrupt("return", result);

            case 5:
            case "end":
              return _context9.stop();
          }
        }
      }, null, null, null, Promise);
    }
  }, {
    key: "getERC20",
    value: function () {
      var _ref2,
          chain,
          address,
          symbol,
          tokenAddress,
          result,
          _args10 = arguments;

      return _regenerator.default.async(function (_context10) {
        while (1) {
          switch (_context10.prev = _context10.next) {
            case 0:
              _ref2 = _args10.length > 0 && _args10[0] !== undefined ? _args10[0] : {}, chain = _ref2.chain, address = _ref2.address, symbol = _ref2.symbol, tokenAddress = _ref2.tokenAddress;
              result = (0, _Cloud.run)('getERC20', {
                chain: chain,
                address: address,
                symbol: symbol,
                tokenAddress: tokenAddress
              });
              return _context10.abrupt("return", result);

            case 3:
            case "end":
              return _context10.stop();
          }
        }
      }, null, null, null, Promise);
    }
  }, {
    key: "getNFTs",
    value: function () {
      var _ref3 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},
          _ref3$chain = _ref3.chain,
          chain = _ref3$chain === void 0 ? 'Eth' : _ref3$chain,
          _ref3$address = _ref3.address,
          address = _ref3$address === void 0 ? '' : _ref3$address;

      return (0, _Cloud.run)('getNFTs_old', {
        chain: chain,
        address: address
      });
    }
  }, {
    key: "getNFTsCount",
    value: function () {
      var _ref4 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},
          _ref4$chain = _ref4.chain,
          chain = _ref4$chain === void 0 ? 'Eth' : _ref4$chain,
          _ref4$address = _ref4.address,
          address = _ref4$address === void 0 ? '' : _ref4$address;

      return (0, _Cloud.run)('getNFTsCount_old', {
        chain: chain,
        address: address
      });
    }
  }, {
    key: "getTransactions",
    value: function () {
      var _ref5 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},
          _ref5$chain = _ref5.chain,
          chain = _ref5$chain === void 0 ? 'Eth' : _ref5$chain,
          _ref5$address = _ref5.address,
          address = _ref5$address === void 0 ? '' : _ref5$address,
          _ref5$order = _ref5.order,
          order = _ref5$order === void 0 ? 'desc' : _ref5$order;

      return (0, _Cloud.run)('getTransactions', {
        chain: chain,
        address: address,
        order: order
      });
    }
  }, {
    key: "getTransactionsCount",
    value: function () {
      var _ref6 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},
          _ref6$chain = _ref6.chain,
          chain = _ref6$chain === void 0 ? 'Eth' : _ref6$chain,
          _ref6$address = _ref6.address,
          address = _ref6$address === void 0 ? '' : _ref6$address;

      return (0, _Cloud.run)('getTransactionsCount', {
        chain: chain,
        address: address
      });
    }
  }, {
    key: "transfer",
    value: function () {
      var _ref7,
          _ref7$type,
          type,
          _ref7$receiver,
          receiver,
          _ref7$contract_addres,
          contract_address,
          _ref7$amount,
          amount,
          _ref7$token_id,
          token_id,
          _ref7$system,
          system,
          options,
          web3,
          sender,
          transferOperation,
          customToken,
          _args11 = arguments;

      return _regenerator.default.async(function (_context11) {
        while (1) {
          switch (_context11.prev = _context11.next) {
            case 0:
              _ref7 = _args11.length > 0 && _args11[0] !== undefined ? _args11[0] : {}, _ref7$type = _ref7.type, type = _ref7$type === void 0 ? 'native' : _ref7$type, _ref7$receiver = _ref7.receiver, receiver = _ref7$receiver === void 0 ? '' : _ref7$receiver, _ref7$contract_addres = _ref7.contract_address, contract_address = _ref7$contract_addres === void 0 ? '' : _ref7$contract_addres, _ref7$amount = _ref7.amount, amount = _ref7$amount === void 0 ? '' : _ref7$amount, _ref7$token_id = _ref7.token_id, token_id = _ref7$token_id === void 0 ? '' : _ref7$token_id, _ref7$system = _ref7.system, system = _ref7$system === void 0 ? 'evm' : _ref7$system;
              options = {
                receiver: receiver,
                contract_address: contract_address,
                amount: amount,
                token_id: token_id,
                system: system
              };

              _TransferUtils.default.isSupportedType(type);

              _TransferUtils.default.validateInput(type, options);

              _context11.next = 6;
              return _regenerator.default.awrap(MoralisWeb3.enable(options));

            case 6:
              web3 = _context11.sent;
              _context11.t0 = _regenerator.default;
              _context11.next = 10;
              return _regenerator.default.awrap(web3.eth.getAccounts());

            case 10:
              _context11.t1 = _context11.sent[0];
              _context11.next = 13;
              return _context11.t0.awrap.call(_context11.t0, _context11.t1);

            case 13:
              sender = _context11.sent;

              if (sender) {
                _context11.next = 16;
                break;
              }

              throw new Error('Sender address not found');

            case 16:
              if (type != 'native') customToken = new web3.eth.Contract(_TransferUtils.default.abi[type], contract_address);
              _context11.t2 = type;
              _context11.next = _context11.t2 === 'native' ? 20 : _context11.t2 === 'erc20' ? 22 : _context11.t2 === 'erc721' ? 24 : _context11.t2 === 'erc1155' ? 26 : 28;
              break;

            case 20:
              transferOperation = web3.eth.sendTransaction({
                from: sender,
                to: receiver,
                value: amount
              });
              return _context11.abrupt("break", 28);

            case 22:
              transferOperation = customToken.methods.transfer(receiver, amount).send({
                from: sender
              });
              return _context11.abrupt("break", 28);

            case 24:
              transferOperation = customToken.methods.safeTransferFrom(sender, receiver, token_id).send({
                from: sender
              });
              return _context11.abrupt("break", 28);

            case 26:
              transferOperation = customToken.methods.safeTransferFrom(sender, receiver, token_id, amount, '0x').send({
                from: sender
              });
              return _context11.abrupt("break", 28);

            case 28:
              return _context11.abrupt("return", transferOperation);

            case 29:
            case "end":
              return _context11.stop();
          }
        }
      }, null, null, null, Promise);
    }
  }, {
    key: "getSigningData",
    value: function () {
      return "Moralis Authentication";
    }
  }, {
    key: "on",
    value: function (eventName, cb) {
      var ethereum = window.ethereum;

      if (!ethereum || !ethereum.on) {
        console.warn(WARNING);
        return function () {
          console.warn(WARNING);
        };
      }

      ethereum.on(eventName, cb);
      return function () {
        console.warn('UNSUB NOT SUPPORTED');
      };
    }
  }]);
  return MoralisWeb3;
}();

MoralisWeb3.onConnect = MoralisWeb3.on.bind(MoralisWeb3, EthereumEvents.CONNECT);
MoralisWeb3.onDisconnect = MoralisWeb3.on.bind(MoralisWeb3, EthereumEvents.DISCONNECT);
MoralisWeb3.onChainChanged = MoralisWeb3.on.bind(MoralisWeb3, EthereumEvents.CHAIN_CHANGED);
MoralisWeb3.onAccountsChanged = MoralisWeb3.on.bind(MoralisWeb3, EthereumEvents.ACCOUNTS_CHANGED);
var _default = MoralisWeb3;
exports.default = _default;